// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerProto.proto

#include "PlayerProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PlayerProto {
constexpr MessageHeader::MessageHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messageid_(int64_t{0})
  , playerid_(int64_t{0})
  , messagetype_(0)

  , messagelength_(0u){}
struct MessageHeaderDefaultTypeInternal {
  constexpr MessageHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageHeaderDefaultTypeInternal() {}
  union {
    MessageHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
constexpr C2S_PlayerConnect::C2S_PlayerConnect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , _oneof_case_{}{}
struct C2S_PlayerConnectDefaultTypeInternal {
  constexpr C2S_PlayerConnectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C2S_PlayerConnectDefaultTypeInternal() {}
  union {
    C2S_PlayerConnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C2S_PlayerConnectDefaultTypeInternal _C2S_PlayerConnect_default_instance_;
constexpr S2C_PlayerConnect::S2C_PlayerConnect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , _oneof_case_{}{}
struct S2C_PlayerConnectDefaultTypeInternal {
  constexpr S2C_PlayerConnectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S2C_PlayerConnectDefaultTypeInternal() {}
  union {
    S2C_PlayerConnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S2C_PlayerConnectDefaultTypeInternal _S2C_PlayerConnect_default_instance_;
constexpr C2S_PlayerDisconnect::C2S_PlayerDisconnect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct C2S_PlayerDisconnectDefaultTypeInternal {
  constexpr C2S_PlayerDisconnectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C2S_PlayerDisconnectDefaultTypeInternal() {}
  union {
    C2S_PlayerDisconnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C2S_PlayerDisconnectDefaultTypeInternal _C2S_PlayerDisconnect_default_instance_;
constexpr C2S_PlayerMove::C2S_PlayerMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct C2S_PlayerMoveDefaultTypeInternal {
  constexpr C2S_PlayerMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C2S_PlayerMoveDefaultTypeInternal() {}
  union {
    C2S_PlayerMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C2S_PlayerMoveDefaultTypeInternal _C2S_PlayerMove_default_instance_;
constexpr S2C_PlayerMove::S2C_PlayerMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , _oneof_case_{}{}
struct S2C_PlayerMoveDefaultTypeInternal {
  constexpr S2C_PlayerMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S2C_PlayerMoveDefaultTypeInternal() {}
  union {
    S2C_PlayerMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S2C_PlayerMoveDefaultTypeInternal _S2C_PlayerMove_default_instance_;
constexpr C2S_PlayerInfo::C2S_PlayerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct C2S_PlayerInfoDefaultTypeInternal {
  constexpr C2S_PlayerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C2S_PlayerInfoDefaultTypeInternal() {}
  union {
    C2S_PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C2S_PlayerInfoDefaultTypeInternal _C2S_PlayerInfo_default_instance_;
constexpr S2C_PlayerInfo::S2C_PlayerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , _oneof_case_{}{}
struct S2C_PlayerInfoDefaultTypeInternal {
  constexpr S2C_PlayerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S2C_PlayerInfoDefaultTypeInternal() {}
  union {
    S2C_PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S2C_PlayerInfoDefaultTypeInternal _S2C_PlayerInfo_default_instance_;
constexpr C2S_PlayerChat::C2S_PlayerChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , _oneof_case_{}{}
struct C2S_PlayerChatDefaultTypeInternal {
  constexpr C2S_PlayerChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C2S_PlayerChatDefaultTypeInternal() {}
  union {
    C2S_PlayerChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C2S_PlayerChatDefaultTypeInternal _C2S_PlayerChat_default_instance_;
constexpr S2C_PlayerChat::S2C_PlayerChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , _oneof_case_{}{}
struct S2C_PlayerChatDefaultTypeInternal {
  constexpr S2C_PlayerChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S2C_PlayerChatDefaultTypeInternal() {}
  union {
    S2C_PlayerChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S2C_PlayerChatDefaultTypeInternal _S2C_PlayerChat_default_instance_;
}  // namespace PlayerProto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_PlayerProto_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_PlayerProto_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_PlayerProto_2eproto = nullptr;

const uint32_t TableStruct_PlayerProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::MessageHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::MessageHeader, messageid_),
  PROTOBUF_FIELD_OFFSET(::PlayerProto::MessageHeader, messagetype_),
  PROTOBUF_FIELD_OFFSET(::PlayerProto::MessageHeader, playerid_),
  PROTOBUF_FIELD_OFFSET(::PlayerProto::MessageHeader, messagelength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::C2S_PlayerConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::C2S_PlayerConnect, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::C2S_PlayerConnect, header_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::PlayerProto::C2S_PlayerConnect, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::S2C_PlayerConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::S2C_PlayerConnect, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::S2C_PlayerConnect, header_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::PlayerProto::S2C_PlayerConnect, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::C2S_PlayerDisconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::C2S_PlayerDisconnect, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::C2S_PlayerMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::C2S_PlayerMove, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::S2C_PlayerMove, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::S2C_PlayerMove, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::S2C_PlayerMove, header_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::PlayerProto::S2C_PlayerMove, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::C2S_PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::C2S_PlayerInfo, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::S2C_PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::S2C_PlayerInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::S2C_PlayerInfo, header_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::PlayerProto::S2C_PlayerInfo, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::C2S_PlayerChat, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::C2S_PlayerChat, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::C2S_PlayerChat, header_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::PlayerProto::C2S_PlayerChat, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::S2C_PlayerChat, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::S2C_PlayerChat, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerProto::S2C_PlayerChat, header_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::PlayerProto::S2C_PlayerChat, body_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PlayerProto::MessageHeader)},
  { 10, -1, -1, sizeof(::PlayerProto::C2S_PlayerConnect)},
  { 19, -1, -1, sizeof(::PlayerProto::S2C_PlayerConnect)},
  { 28, -1, -1, sizeof(::PlayerProto::C2S_PlayerDisconnect)},
  { 35, -1, -1, sizeof(::PlayerProto::C2S_PlayerMove)},
  { 42, -1, -1, sizeof(::PlayerProto::S2C_PlayerMove)},
  { 53, -1, -1, sizeof(::PlayerProto::C2S_PlayerInfo)},
  { 60, -1, -1, sizeof(::PlayerProto::S2C_PlayerInfo)},
  { 71, -1, -1, sizeof(::PlayerProto::C2S_PlayerChat)},
  { 80, -1, -1, sizeof(::PlayerProto::S2C_PlayerChat)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlayerProto::_MessageHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlayerProto::_C2S_PlayerConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlayerProto::_S2C_PlayerConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlayerProto::_C2S_PlayerDisconnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlayerProto::_C2S_PlayerMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlayerProto::_S2C_PlayerMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlayerProto::_C2S_PlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlayerProto::_S2C_PlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlayerProto::_C2S_PlayerChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlayerProto::_S2C_PlayerChat_default_instance_),
};

const char descriptor_table_protodef_PlayerProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021PlayerProto.proto\022\013PlayerProto\"z\n\rMess"
  "ageHeader\022\021\n\tmessageId\030\001 \001(\003\022-\n\013messageT"
  "ype\030\002 \001(\0162\030.PlayerProto.MessageType\022\020\n\010p"
  "layerId\030\003 \001(\003\022\025\n\rmessageLength\030\004 \001(\r\"]\n\021"
  "C2S_PlayerConnect\022*\n\006header\030\001 \001(\0132\032.Play"
  "erProto.MessageHeader\022\024\n\nplayerName\030\002 \001("
  "\tH\000B\006\n\004body\"V\n\021S2C_PlayerConnect\022*\n\006head"
  "er\030\001 \001(\0132\032.PlayerProto.MessageHeader\022\r\n\003"
  "res\030\002 \001(\tH\000B\006\n\004body\"B\n\024C2S_PlayerDisconn"
  "ect\022*\n\006header\030\001 \001(\0132\032.PlayerProto.Messag"
  "eHeader\"<\n\016C2S_PlayerMove\022*\n\006header\030\001 \001("
  "\0132\032.PlayerProto.MessageHeader\"k\n\016S2C_Pla"
  "yerMove\022*\n\006header\030\001 \001(\0132\032.PlayerProto.Me"
  "ssageHeader\022\013\n\001x\030\002 \001(\005H\000\022\013\n\001y\030\003 \001(\005H\000\022\013\n"
  "\001z\030\004 \001(\005H\000B\006\n\004body\"<\n\016C2S_PlayerInfo\022*\n\006"
  "header\030\001 \001(\0132\032.PlayerProto.MessageHeader"
  "\"|\n\016S2C_PlayerInfo\022*\n\006header\030\001 \001(\0132\032.Pla"
  "yerProto.MessageHeader\022\024\n\nplayerName\030\002 \001"
  "(\tH\000\022\017\n\005level\030\003 \001(\005H\000\022\017\n\005money\030\004 \001(\005H\000B\006"
  "\n\004body\"T\n\016C2S_PlayerChat\022*\n\006header\030\001 \001(\013"
  "2\032.PlayerProto.MessageHeader\022\016\n\004chat\030\002 \001"
  "(\tH\000B\006\n\004body\"h\n\016S2C_PlayerChat\022*\n\006header"
  "\030\001 \001(\0132\032.PlayerProto.MessageHeader\022\022\n\010pl"
  "ayerId\030\002 \001(\003H\000\022\016\n\004chat\030\003 \001(\tH\000B\006\n\004body*\217"
  "\001\n\013MessageType\022\022\n\016PLAYER_CONNECT\020\000\022\025\n\021PL"
  "AYER_DISCONNECT\020\001\022\017\n\013PLAYER_MOVE\020\020\022\017\n\013PL"
  "AYER_SHOP\020\021\022\017\n\013PLAYER_INFO\020\022\022\017\n\013PLAYER_C"
  "HAT\020\023\022\021\n\014PLAYER_ERROR\020\220\001*+\n\tErrorCode\022\013\n"
  "\007SUCCESS\020\000\022\021\n\014UNKOWN_ERROR\020\231\001*\'\n\010ShopTyp"
  "e\022\014\n\010SHOP_BUY\020\000\022\r\n\tSHOP_SELL\020\001*\264\001\n\013Trade"
  "Status\022\021\n\rTRADE_SUCCESS\020\000\022\031\n\025TRADE_NOTEN"
  "OUGH_MONEY\020\020\022\030\n\024TRADE_NOTENOUGH_ITEM\020\021\022\022"
  "\n\016TRADE_OVERFLOW\020\022\022\027\n\023TRADE_NOTFOUND_ITE"
  "M\020\023\022\027\n\023TRADE_NOTFOUND_SHOP\020\024\022\027\n\023TRADE_UN"
  "KNOWN_ERROR\020\031b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_PlayerProto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PlayerProto_2eproto = {
  false, false, 1381, descriptor_table_protodef_PlayerProto_2eproto, "PlayerProto.proto", 
  &descriptor_table_PlayerProto_2eproto_once, nullptr, 0, 10,
  schemas, file_default_instances, TableStruct_PlayerProto_2eproto::offsets,
  file_level_metadata_PlayerProto_2eproto, file_level_enum_descriptors_PlayerProto_2eproto, file_level_service_descriptors_PlayerProto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_PlayerProto_2eproto_getter() {
  return &descriptor_table_PlayerProto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_PlayerProto_2eproto(&descriptor_table_PlayerProto_2eproto);
namespace PlayerProto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PlayerProto_2eproto);
  return file_level_enum_descriptors_PlayerProto_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 16:
    case 17:
    case 18:
    case 19:
    case 144:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PlayerProto_2eproto);
  return file_level_enum_descriptors_PlayerProto_2eproto[1];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 153:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShopType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PlayerProto_2eproto);
  return file_level_enum_descriptors_PlayerProto_2eproto[2];
}
bool ShopType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PlayerProto_2eproto);
  return file_level_enum_descriptors_PlayerProto_2eproto[3];
}
bool TradeStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 25:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MessageHeader::_Internal {
 public:
};

MessageHeader::MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PlayerProto.MessageHeader)
}
MessageHeader::MessageHeader(const MessageHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&messageid_, &from.messageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&messagelength_) -
    reinterpret_cast<char*>(&messageid_)) + sizeof(messagelength_));
  // @@protoc_insertion_point(copy_constructor:PlayerProto.MessageHeader)
}

inline void MessageHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&messageid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&messagelength_) -
    reinterpret_cast<char*>(&messageid_)) + sizeof(messagelength_));
}

MessageHeader::~MessageHeader() {
  // @@protoc_insertion_point(destructor:PlayerProto.MessageHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageHeader::ArenaDtor(void* object) {
  MessageHeader* _this = reinterpret_cast< MessageHeader* >(object);
  (void)_this;
}
void MessageHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerProto.MessageHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&messageid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&messagelength_) -
      reinterpret_cast<char*>(&messageid_)) + sizeof(messagelength_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 messageId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          messageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PlayerProto.MessageType messageType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::PlayerProto::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 playerId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 messageLength = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          messagelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerProto.MessageHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 messageId = 1;
  if (this->_internal_messageid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_messageid(), target);
  }

  // .PlayerProto.MessageType messageType = 2;
  if (this->_internal_messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_messagetype(), target);
  }

  // int64 playerId = 3;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_playerid(), target);
  }

  // uint32 messageLength = 4;
  if (this->_internal_messagelength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_messagelength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerProto.MessageHeader)
  return target;
}

size_t MessageHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerProto.MessageHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 messageId = 1;
  if (this->_internal_messageid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_messageid());
  }

  // int64 playerId = 3;
  if (this->_internal_playerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_playerid());
  }

  // .PlayerProto.MessageType messageType = 2;
  if (this->_internal_messagetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  // uint32 messageLength = 4;
  if (this->_internal_messagelength() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_messagelength());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageHeader::GetClassData() const { return &_class_data_; }

void MessageHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageHeader *>(to)->MergeFrom(
      static_cast<const MessageHeader &>(from));
}


void MessageHeader::MergeFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerProto.MessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_messageid() != 0) {
    _internal_set_messageid(from._internal_messageid());
  }
  if (from._internal_playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_messagetype() != 0) {
    _internal_set_messagetype(from._internal_messagetype());
  }
  if (from._internal_messagelength() != 0) {
    _internal_set_messagelength(from._internal_messagelength());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageHeader::CopyFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerProto.MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageHeader::IsInitialized() const {
  return true;
}

void MessageHeader::InternalSwap(MessageHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageHeader, messagelength_)
      + sizeof(MessageHeader::messagelength_)
      - PROTOBUF_FIELD_OFFSET(MessageHeader, messageid_)>(
          reinterpret_cast<char*>(&messageid_),
          reinterpret_cast<char*>(&other->messageid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PlayerProto_2eproto_getter, &descriptor_table_PlayerProto_2eproto_once,
      file_level_metadata_PlayerProto_2eproto[0]);
}

// ===================================================================

class C2S_PlayerConnect::_Internal {
 public:
  static const ::PlayerProto::MessageHeader& header(const C2S_PlayerConnect* msg);
};

const ::PlayerProto::MessageHeader&
C2S_PlayerConnect::_Internal::header(const C2S_PlayerConnect* msg) {
  return *msg->header_;
}
C2S_PlayerConnect::C2S_PlayerConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PlayerProto.C2S_PlayerConnect)
}
C2S_PlayerConnect::C2S_PlayerConnect(const C2S_PlayerConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::PlayerProto::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  clear_has_body();
  switch (from.body_case()) {
    case kPlayerName: {
      _internal_set_playername(from._internal_playername());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:PlayerProto.C2S_PlayerConnect)
}

inline void C2S_PlayerConnect::SharedCtor() {
header_ = nullptr;
clear_has_body();
}

C2S_PlayerConnect::~C2S_PlayerConnect() {
  // @@protoc_insertion_point(destructor:PlayerProto.C2S_PlayerConnect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C2S_PlayerConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (has_body()) {
    clear_body();
  }
}

void C2S_PlayerConnect::ArenaDtor(void* object) {
  C2S_PlayerConnect* _this = reinterpret_cast< C2S_PlayerConnect* >(object);
  (void)_this;
}
void C2S_PlayerConnect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C2S_PlayerConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C2S_PlayerConnect::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:PlayerProto.C2S_PlayerConnect)
  switch (body_case()) {
    case kPlayerName: {
      body_.playername_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void C2S_PlayerConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerProto.C2S_PlayerConnect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  clear_body();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_PlayerConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PlayerProto.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string playerName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_playername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlayerProto.C2S_PlayerConnect.playerName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_PlayerConnect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerProto.C2S_PlayerConnect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlayerProto.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string playerName = 2;
  if (_internal_has_playername()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playername().data(), static_cast<int>(this->_internal_playername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerProto.C2S_PlayerConnect.playerName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_playername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerProto.C2S_PlayerConnect)
  return target;
}

size_t C2S_PlayerConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerProto.C2S_PlayerConnect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlayerProto.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  switch (body_case()) {
    // string playerName = 2;
    case kPlayerName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playername());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_PlayerConnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C2S_PlayerConnect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_PlayerConnect::GetClassData() const { return &_class_data_; }

void C2S_PlayerConnect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C2S_PlayerConnect *>(to)->MergeFrom(
      static_cast<const C2S_PlayerConnect &>(from));
}


void C2S_PlayerConnect::MergeFrom(const C2S_PlayerConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerProto.C2S_PlayerConnect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::PlayerProto::MessageHeader::MergeFrom(from._internal_header());
  }
  switch (from.body_case()) {
    case kPlayerName: {
      _internal_set_playername(from._internal_playername());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_PlayerConnect::CopyFrom(const C2S_PlayerConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerProto.C2S_PlayerConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_PlayerConnect::IsInitialized() const {
  return true;
}

void C2S_PlayerConnect::InternalSwap(C2S_PlayerConnect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(body_, other->body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_PlayerConnect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PlayerProto_2eproto_getter, &descriptor_table_PlayerProto_2eproto_once,
      file_level_metadata_PlayerProto_2eproto[1]);
}

// ===================================================================

class S2C_PlayerConnect::_Internal {
 public:
  static const ::PlayerProto::MessageHeader& header(const S2C_PlayerConnect* msg);
};

const ::PlayerProto::MessageHeader&
S2C_PlayerConnect::_Internal::header(const S2C_PlayerConnect* msg) {
  return *msg->header_;
}
S2C_PlayerConnect::S2C_PlayerConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PlayerProto.S2C_PlayerConnect)
}
S2C_PlayerConnect::S2C_PlayerConnect(const S2C_PlayerConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::PlayerProto::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  clear_has_body();
  switch (from.body_case()) {
    case kRes: {
      _internal_set_res(from._internal_res());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:PlayerProto.S2C_PlayerConnect)
}

inline void S2C_PlayerConnect::SharedCtor() {
header_ = nullptr;
clear_has_body();
}

S2C_PlayerConnect::~S2C_PlayerConnect() {
  // @@protoc_insertion_point(destructor:PlayerProto.S2C_PlayerConnect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S2C_PlayerConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (has_body()) {
    clear_body();
  }
}

void S2C_PlayerConnect::ArenaDtor(void* object) {
  S2C_PlayerConnect* _this = reinterpret_cast< S2C_PlayerConnect* >(object);
  (void)_this;
}
void S2C_PlayerConnect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S2C_PlayerConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S2C_PlayerConnect::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:PlayerProto.S2C_PlayerConnect)
  switch (body_case()) {
    case kRes: {
      body_.res_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void S2C_PlayerConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerProto.S2C_PlayerConnect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  clear_body();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_PlayerConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PlayerProto.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_res();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlayerProto.S2C_PlayerConnect.res"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_PlayerConnect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerProto.S2C_PlayerConnect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlayerProto.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string res = 2;
  if (_internal_has_res()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res().data(), static_cast<int>(this->_internal_res().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerProto.S2C_PlayerConnect.res");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerProto.S2C_PlayerConnect)
  return target;
}

size_t S2C_PlayerConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerProto.S2C_PlayerConnect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlayerProto.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  switch (body_case()) {
    // string res = 2;
    case kRes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_res());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_PlayerConnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S2C_PlayerConnect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_PlayerConnect::GetClassData() const { return &_class_data_; }

void S2C_PlayerConnect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S2C_PlayerConnect *>(to)->MergeFrom(
      static_cast<const S2C_PlayerConnect &>(from));
}


void S2C_PlayerConnect::MergeFrom(const S2C_PlayerConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerProto.S2C_PlayerConnect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::PlayerProto::MessageHeader::MergeFrom(from._internal_header());
  }
  switch (from.body_case()) {
    case kRes: {
      _internal_set_res(from._internal_res());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_PlayerConnect::CopyFrom(const S2C_PlayerConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerProto.S2C_PlayerConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PlayerConnect::IsInitialized() const {
  return true;
}

void S2C_PlayerConnect::InternalSwap(S2C_PlayerConnect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(body_, other->body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_PlayerConnect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PlayerProto_2eproto_getter, &descriptor_table_PlayerProto_2eproto_once,
      file_level_metadata_PlayerProto_2eproto[2]);
}

// ===================================================================

class C2S_PlayerDisconnect::_Internal {
 public:
  static const ::PlayerProto::MessageHeader& header(const C2S_PlayerDisconnect* msg);
};

const ::PlayerProto::MessageHeader&
C2S_PlayerDisconnect::_Internal::header(const C2S_PlayerDisconnect* msg) {
  return *msg->header_;
}
C2S_PlayerDisconnect::C2S_PlayerDisconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PlayerProto.C2S_PlayerDisconnect)
}
C2S_PlayerDisconnect::C2S_PlayerDisconnect(const C2S_PlayerDisconnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::PlayerProto::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlayerProto.C2S_PlayerDisconnect)
}

inline void C2S_PlayerDisconnect::SharedCtor() {
header_ = nullptr;
}

C2S_PlayerDisconnect::~C2S_PlayerDisconnect() {
  // @@protoc_insertion_point(destructor:PlayerProto.C2S_PlayerDisconnect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C2S_PlayerDisconnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void C2S_PlayerDisconnect::ArenaDtor(void* object) {
  C2S_PlayerDisconnect* _this = reinterpret_cast< C2S_PlayerDisconnect* >(object);
  (void)_this;
}
void C2S_PlayerDisconnect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C2S_PlayerDisconnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C2S_PlayerDisconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerProto.C2S_PlayerDisconnect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_PlayerDisconnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PlayerProto.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_PlayerDisconnect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerProto.C2S_PlayerDisconnect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlayerProto.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerProto.C2S_PlayerDisconnect)
  return target;
}

size_t C2S_PlayerDisconnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerProto.C2S_PlayerDisconnect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlayerProto.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_PlayerDisconnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C2S_PlayerDisconnect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_PlayerDisconnect::GetClassData() const { return &_class_data_; }

void C2S_PlayerDisconnect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C2S_PlayerDisconnect *>(to)->MergeFrom(
      static_cast<const C2S_PlayerDisconnect &>(from));
}


void C2S_PlayerDisconnect::MergeFrom(const C2S_PlayerDisconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerProto.C2S_PlayerDisconnect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::PlayerProto::MessageHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_PlayerDisconnect::CopyFrom(const C2S_PlayerDisconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerProto.C2S_PlayerDisconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_PlayerDisconnect::IsInitialized() const {
  return true;
}

void C2S_PlayerDisconnect::InternalSwap(C2S_PlayerDisconnect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_PlayerDisconnect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PlayerProto_2eproto_getter, &descriptor_table_PlayerProto_2eproto_once,
      file_level_metadata_PlayerProto_2eproto[3]);
}

// ===================================================================

class C2S_PlayerMove::_Internal {
 public:
  static const ::PlayerProto::MessageHeader& header(const C2S_PlayerMove* msg);
};

const ::PlayerProto::MessageHeader&
C2S_PlayerMove::_Internal::header(const C2S_PlayerMove* msg) {
  return *msg->header_;
}
C2S_PlayerMove::C2S_PlayerMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PlayerProto.C2S_PlayerMove)
}
C2S_PlayerMove::C2S_PlayerMove(const C2S_PlayerMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::PlayerProto::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlayerProto.C2S_PlayerMove)
}

inline void C2S_PlayerMove::SharedCtor() {
header_ = nullptr;
}

C2S_PlayerMove::~C2S_PlayerMove() {
  // @@protoc_insertion_point(destructor:PlayerProto.C2S_PlayerMove)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C2S_PlayerMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void C2S_PlayerMove::ArenaDtor(void* object) {
  C2S_PlayerMove* _this = reinterpret_cast< C2S_PlayerMove* >(object);
  (void)_this;
}
void C2S_PlayerMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C2S_PlayerMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C2S_PlayerMove::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerProto.C2S_PlayerMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_PlayerMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PlayerProto.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_PlayerMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerProto.C2S_PlayerMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlayerProto.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerProto.C2S_PlayerMove)
  return target;
}

size_t C2S_PlayerMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerProto.C2S_PlayerMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlayerProto.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_PlayerMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C2S_PlayerMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_PlayerMove::GetClassData() const { return &_class_data_; }

void C2S_PlayerMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C2S_PlayerMove *>(to)->MergeFrom(
      static_cast<const C2S_PlayerMove &>(from));
}


void C2S_PlayerMove::MergeFrom(const C2S_PlayerMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerProto.C2S_PlayerMove)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::PlayerProto::MessageHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_PlayerMove::CopyFrom(const C2S_PlayerMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerProto.C2S_PlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_PlayerMove::IsInitialized() const {
  return true;
}

void C2S_PlayerMove::InternalSwap(C2S_PlayerMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_PlayerMove::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PlayerProto_2eproto_getter, &descriptor_table_PlayerProto_2eproto_once,
      file_level_metadata_PlayerProto_2eproto[4]);
}

// ===================================================================

class S2C_PlayerMove::_Internal {
 public:
  static const ::PlayerProto::MessageHeader& header(const S2C_PlayerMove* msg);
};

const ::PlayerProto::MessageHeader&
S2C_PlayerMove::_Internal::header(const S2C_PlayerMove* msg) {
  return *msg->header_;
}
S2C_PlayerMove::S2C_PlayerMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PlayerProto.S2C_PlayerMove)
}
S2C_PlayerMove::S2C_PlayerMove(const S2C_PlayerMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::PlayerProto::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  clear_has_body();
  switch (from.body_case()) {
    case kX: {
      _internal_set_x(from._internal_x());
      break;
    }
    case kY: {
      _internal_set_y(from._internal_y());
      break;
    }
    case kZ: {
      _internal_set_z(from._internal_z());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:PlayerProto.S2C_PlayerMove)
}

inline void S2C_PlayerMove::SharedCtor() {
header_ = nullptr;
clear_has_body();
}

S2C_PlayerMove::~S2C_PlayerMove() {
  // @@protoc_insertion_point(destructor:PlayerProto.S2C_PlayerMove)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S2C_PlayerMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (has_body()) {
    clear_body();
  }
}

void S2C_PlayerMove::ArenaDtor(void* object) {
  S2C_PlayerMove* _this = reinterpret_cast< S2C_PlayerMove* >(object);
  (void)_this;
}
void S2C_PlayerMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S2C_PlayerMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S2C_PlayerMove::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:PlayerProto.S2C_PlayerMove)
  switch (body_case()) {
    case kX: {
      // No need to clear
      break;
    }
    case kY: {
      // No need to clear
      break;
    }
    case kZ: {
      // No need to clear
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void S2C_PlayerMove::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerProto.S2C_PlayerMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  clear_body();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_PlayerMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PlayerProto.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_x(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_y(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_z(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_PlayerMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerProto.S2C_PlayerMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlayerProto.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // int32 x = 2;
  if (_internal_has_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (_internal_has_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // int32 z = 4;
  if (_internal_has_z()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerProto.S2C_PlayerMove)
  return target;
}

size_t S2C_PlayerMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerProto.S2C_PlayerMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlayerProto.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  switch (body_case()) {
    // int32 x = 2;
    case kX: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
      break;
    }
    // int32 y = 3;
    case kY: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
      break;
    }
    // int32 z = 4;
    case kZ: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_z());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_PlayerMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S2C_PlayerMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_PlayerMove::GetClassData() const { return &_class_data_; }

void S2C_PlayerMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S2C_PlayerMove *>(to)->MergeFrom(
      static_cast<const S2C_PlayerMove &>(from));
}


void S2C_PlayerMove::MergeFrom(const S2C_PlayerMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerProto.S2C_PlayerMove)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::PlayerProto::MessageHeader::MergeFrom(from._internal_header());
  }
  switch (from.body_case()) {
    case kX: {
      _internal_set_x(from._internal_x());
      break;
    }
    case kY: {
      _internal_set_y(from._internal_y());
      break;
    }
    case kZ: {
      _internal_set_z(from._internal_z());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_PlayerMove::CopyFrom(const S2C_PlayerMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerProto.S2C_PlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PlayerMove::IsInitialized() const {
  return true;
}

void S2C_PlayerMove::InternalSwap(S2C_PlayerMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(body_, other->body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_PlayerMove::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PlayerProto_2eproto_getter, &descriptor_table_PlayerProto_2eproto_once,
      file_level_metadata_PlayerProto_2eproto[5]);
}

// ===================================================================

class C2S_PlayerInfo::_Internal {
 public:
  static const ::PlayerProto::MessageHeader& header(const C2S_PlayerInfo* msg);
};

const ::PlayerProto::MessageHeader&
C2S_PlayerInfo::_Internal::header(const C2S_PlayerInfo* msg) {
  return *msg->header_;
}
C2S_PlayerInfo::C2S_PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PlayerProto.C2S_PlayerInfo)
}
C2S_PlayerInfo::C2S_PlayerInfo(const C2S_PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::PlayerProto::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlayerProto.C2S_PlayerInfo)
}

inline void C2S_PlayerInfo::SharedCtor() {
header_ = nullptr;
}

C2S_PlayerInfo::~C2S_PlayerInfo() {
  // @@protoc_insertion_point(destructor:PlayerProto.C2S_PlayerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C2S_PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void C2S_PlayerInfo::ArenaDtor(void* object) {
  C2S_PlayerInfo* _this = reinterpret_cast< C2S_PlayerInfo* >(object);
  (void)_this;
}
void C2S_PlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C2S_PlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C2S_PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerProto.C2S_PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_PlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PlayerProto.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerProto.C2S_PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlayerProto.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerProto.C2S_PlayerInfo)
  return target;
}

size_t C2S_PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerProto.C2S_PlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlayerProto.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C2S_PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_PlayerInfo::GetClassData() const { return &_class_data_; }

void C2S_PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C2S_PlayerInfo *>(to)->MergeFrom(
      static_cast<const C2S_PlayerInfo &>(from));
}


void C2S_PlayerInfo::MergeFrom(const C2S_PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerProto.C2S_PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::PlayerProto::MessageHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_PlayerInfo::CopyFrom(const C2S_PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerProto.C2S_PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_PlayerInfo::IsInitialized() const {
  return true;
}

void C2S_PlayerInfo::InternalSwap(C2S_PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_PlayerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PlayerProto_2eproto_getter, &descriptor_table_PlayerProto_2eproto_once,
      file_level_metadata_PlayerProto_2eproto[6]);
}

// ===================================================================

class S2C_PlayerInfo::_Internal {
 public:
  static const ::PlayerProto::MessageHeader& header(const S2C_PlayerInfo* msg);
};

const ::PlayerProto::MessageHeader&
S2C_PlayerInfo::_Internal::header(const S2C_PlayerInfo* msg) {
  return *msg->header_;
}
S2C_PlayerInfo::S2C_PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PlayerProto.S2C_PlayerInfo)
}
S2C_PlayerInfo::S2C_PlayerInfo(const S2C_PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::PlayerProto::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  clear_has_body();
  switch (from.body_case()) {
    case kPlayerName: {
      _internal_set_playername(from._internal_playername());
      break;
    }
    case kLevel: {
      _internal_set_level(from._internal_level());
      break;
    }
    case kMoney: {
      _internal_set_money(from._internal_money());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:PlayerProto.S2C_PlayerInfo)
}

inline void S2C_PlayerInfo::SharedCtor() {
header_ = nullptr;
clear_has_body();
}

S2C_PlayerInfo::~S2C_PlayerInfo() {
  // @@protoc_insertion_point(destructor:PlayerProto.S2C_PlayerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S2C_PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (has_body()) {
    clear_body();
  }
}

void S2C_PlayerInfo::ArenaDtor(void* object) {
  S2C_PlayerInfo* _this = reinterpret_cast< S2C_PlayerInfo* >(object);
  (void)_this;
}
void S2C_PlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S2C_PlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S2C_PlayerInfo::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:PlayerProto.S2C_PlayerInfo)
  switch (body_case()) {
    case kPlayerName: {
      body_.playername_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kLevel: {
      // No need to clear
      break;
    }
    case kMoney: {
      // No need to clear
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void S2C_PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerProto.S2C_PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  clear_body();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_PlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PlayerProto.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string playerName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_playername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlayerProto.S2C_PlayerInfo.playerName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_level(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 money = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_money(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerProto.S2C_PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlayerProto.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string playerName = 2;
  if (_internal_has_playername()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playername().data(), static_cast<int>(this->_internal_playername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerProto.S2C_PlayerInfo.playerName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_playername(), target);
  }

  // int32 level = 3;
  if (_internal_has_level()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  // int32 money = 4;
  if (_internal_has_money()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_money(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerProto.S2C_PlayerInfo)
  return target;
}

size_t S2C_PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerProto.S2C_PlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlayerProto.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  switch (body_case()) {
    // string playerName = 2;
    case kPlayerName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playername());
      break;
    }
    // int32 level = 3;
    case kLevel: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_level());
      break;
    }
    // int32 money = 4;
    case kMoney: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_money());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S2C_PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_PlayerInfo::GetClassData() const { return &_class_data_; }

void S2C_PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S2C_PlayerInfo *>(to)->MergeFrom(
      static_cast<const S2C_PlayerInfo &>(from));
}


void S2C_PlayerInfo::MergeFrom(const S2C_PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerProto.S2C_PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::PlayerProto::MessageHeader::MergeFrom(from._internal_header());
  }
  switch (from.body_case()) {
    case kPlayerName: {
      _internal_set_playername(from._internal_playername());
      break;
    }
    case kLevel: {
      _internal_set_level(from._internal_level());
      break;
    }
    case kMoney: {
      _internal_set_money(from._internal_money());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_PlayerInfo::CopyFrom(const S2C_PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerProto.S2C_PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PlayerInfo::IsInitialized() const {
  return true;
}

void S2C_PlayerInfo::InternalSwap(S2C_PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(body_, other->body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_PlayerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PlayerProto_2eproto_getter, &descriptor_table_PlayerProto_2eproto_once,
      file_level_metadata_PlayerProto_2eproto[7]);
}

// ===================================================================

class C2S_PlayerChat::_Internal {
 public:
  static const ::PlayerProto::MessageHeader& header(const C2S_PlayerChat* msg);
};

const ::PlayerProto::MessageHeader&
C2S_PlayerChat::_Internal::header(const C2S_PlayerChat* msg) {
  return *msg->header_;
}
C2S_PlayerChat::C2S_PlayerChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PlayerProto.C2S_PlayerChat)
}
C2S_PlayerChat::C2S_PlayerChat(const C2S_PlayerChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::PlayerProto::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  clear_has_body();
  switch (from.body_case()) {
    case kChat: {
      _internal_set_chat(from._internal_chat());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:PlayerProto.C2S_PlayerChat)
}

inline void C2S_PlayerChat::SharedCtor() {
header_ = nullptr;
clear_has_body();
}

C2S_PlayerChat::~C2S_PlayerChat() {
  // @@protoc_insertion_point(destructor:PlayerProto.C2S_PlayerChat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C2S_PlayerChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (has_body()) {
    clear_body();
  }
}

void C2S_PlayerChat::ArenaDtor(void* object) {
  C2S_PlayerChat* _this = reinterpret_cast< C2S_PlayerChat* >(object);
  (void)_this;
}
void C2S_PlayerChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C2S_PlayerChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C2S_PlayerChat::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:PlayerProto.C2S_PlayerChat)
  switch (body_case()) {
    case kChat: {
      body_.chat_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void C2S_PlayerChat::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerProto.C2S_PlayerChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  clear_body();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_PlayerChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PlayerProto.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlayerProto.C2S_PlayerChat.chat"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_PlayerChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerProto.C2S_PlayerChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlayerProto.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string chat = 2;
  if (_internal_has_chat()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat().data(), static_cast<int>(this->_internal_chat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerProto.C2S_PlayerChat.chat");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerProto.C2S_PlayerChat)
  return target;
}

size_t C2S_PlayerChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerProto.C2S_PlayerChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlayerProto.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  switch (body_case()) {
    // string chat = 2;
    case kChat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chat());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_PlayerChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C2S_PlayerChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_PlayerChat::GetClassData() const { return &_class_data_; }

void C2S_PlayerChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C2S_PlayerChat *>(to)->MergeFrom(
      static_cast<const C2S_PlayerChat &>(from));
}


void C2S_PlayerChat::MergeFrom(const C2S_PlayerChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerProto.C2S_PlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::PlayerProto::MessageHeader::MergeFrom(from._internal_header());
  }
  switch (from.body_case()) {
    case kChat: {
      _internal_set_chat(from._internal_chat());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_PlayerChat::CopyFrom(const C2S_PlayerChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerProto.C2S_PlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_PlayerChat::IsInitialized() const {
  return true;
}

void C2S_PlayerChat::InternalSwap(C2S_PlayerChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(body_, other->body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_PlayerChat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PlayerProto_2eproto_getter, &descriptor_table_PlayerProto_2eproto_once,
      file_level_metadata_PlayerProto_2eproto[8]);
}

// ===================================================================

class S2C_PlayerChat::_Internal {
 public:
  static const ::PlayerProto::MessageHeader& header(const S2C_PlayerChat* msg);
};

const ::PlayerProto::MessageHeader&
S2C_PlayerChat::_Internal::header(const S2C_PlayerChat* msg) {
  return *msg->header_;
}
S2C_PlayerChat::S2C_PlayerChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PlayerProto.S2C_PlayerChat)
}
S2C_PlayerChat::S2C_PlayerChat(const S2C_PlayerChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::PlayerProto::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  clear_has_body();
  switch (from.body_case()) {
    case kPlayerId: {
      _internal_set_playerid(from._internal_playerid());
      break;
    }
    case kChat: {
      _internal_set_chat(from._internal_chat());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:PlayerProto.S2C_PlayerChat)
}

inline void S2C_PlayerChat::SharedCtor() {
header_ = nullptr;
clear_has_body();
}

S2C_PlayerChat::~S2C_PlayerChat() {
  // @@protoc_insertion_point(destructor:PlayerProto.S2C_PlayerChat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S2C_PlayerChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (has_body()) {
    clear_body();
  }
}

void S2C_PlayerChat::ArenaDtor(void* object) {
  S2C_PlayerChat* _this = reinterpret_cast< S2C_PlayerChat* >(object);
  (void)_this;
}
void S2C_PlayerChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S2C_PlayerChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S2C_PlayerChat::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:PlayerProto.S2C_PlayerChat)
  switch (body_case()) {
    case kPlayerId: {
      // No need to clear
      break;
    }
    case kChat: {
      body_.chat_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void S2C_PlayerChat::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerProto.S2C_PlayerChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  clear_body();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_PlayerChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PlayerProto.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_chat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlayerProto.S2C_PlayerChat.chat"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_PlayerChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerProto.S2C_PlayerChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlayerProto.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // int64 playerId = 2;
  if (_internal_has_playerid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_playerid(), target);
  }

  // string chat = 3;
  if (_internal_has_chat()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat().data(), static_cast<int>(this->_internal_chat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerProto.S2C_PlayerChat.chat");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_chat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerProto.S2C_PlayerChat)
  return target;
}

size_t S2C_PlayerChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerProto.S2C_PlayerChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlayerProto.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  switch (body_case()) {
    // int64 playerId = 2;
    case kPlayerId: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_playerid());
      break;
    }
    // string chat = 3;
    case kChat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chat());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_PlayerChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S2C_PlayerChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_PlayerChat::GetClassData() const { return &_class_data_; }

void S2C_PlayerChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S2C_PlayerChat *>(to)->MergeFrom(
      static_cast<const S2C_PlayerChat &>(from));
}


void S2C_PlayerChat::MergeFrom(const S2C_PlayerChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerProto.S2C_PlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::PlayerProto::MessageHeader::MergeFrom(from._internal_header());
  }
  switch (from.body_case()) {
    case kPlayerId: {
      _internal_set_playerid(from._internal_playerid());
      break;
    }
    case kChat: {
      _internal_set_chat(from._internal_chat());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_PlayerChat::CopyFrom(const S2C_PlayerChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerProto.S2C_PlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PlayerChat::IsInitialized() const {
  return true;
}

void S2C_PlayerChat::InternalSwap(S2C_PlayerChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(body_, other->body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_PlayerChat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PlayerProto_2eproto_getter, &descriptor_table_PlayerProto_2eproto_once,
      file_level_metadata_PlayerProto_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PlayerProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PlayerProto::MessageHeader* Arena::CreateMaybeMessage< ::PlayerProto::MessageHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerProto::MessageHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerProto::C2S_PlayerConnect* Arena::CreateMaybeMessage< ::PlayerProto::C2S_PlayerConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerProto::C2S_PlayerConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerProto::S2C_PlayerConnect* Arena::CreateMaybeMessage< ::PlayerProto::S2C_PlayerConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerProto::S2C_PlayerConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerProto::C2S_PlayerDisconnect* Arena::CreateMaybeMessage< ::PlayerProto::C2S_PlayerDisconnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerProto::C2S_PlayerDisconnect >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerProto::C2S_PlayerMove* Arena::CreateMaybeMessage< ::PlayerProto::C2S_PlayerMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerProto::C2S_PlayerMove >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerProto::S2C_PlayerMove* Arena::CreateMaybeMessage< ::PlayerProto::S2C_PlayerMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerProto::S2C_PlayerMove >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerProto::C2S_PlayerInfo* Arena::CreateMaybeMessage< ::PlayerProto::C2S_PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerProto::C2S_PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerProto::S2C_PlayerInfo* Arena::CreateMaybeMessage< ::PlayerProto::S2C_PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerProto::S2C_PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerProto::C2S_PlayerChat* Arena::CreateMaybeMessage< ::PlayerProto::C2S_PlayerChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerProto::C2S_PlayerChat >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerProto::S2C_PlayerChat* Arena::CreateMaybeMessage< ::PlayerProto::S2C_PlayerChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerProto::S2C_PlayerChat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
