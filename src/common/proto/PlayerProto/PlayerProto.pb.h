// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PlayerProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PlayerProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PlayerProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PlayerProto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PlayerProto_2eproto;
namespace PlayerProto {
class C2S_PlayerChat;
struct C2S_PlayerChatDefaultTypeInternal;
extern C2S_PlayerChatDefaultTypeInternal _C2S_PlayerChat_default_instance_;
class C2S_PlayerConnect;
struct C2S_PlayerConnectDefaultTypeInternal;
extern C2S_PlayerConnectDefaultTypeInternal _C2S_PlayerConnect_default_instance_;
class C2S_PlayerDisconnect;
struct C2S_PlayerDisconnectDefaultTypeInternal;
extern C2S_PlayerDisconnectDefaultTypeInternal _C2S_PlayerDisconnect_default_instance_;
class C2S_PlayerInfo;
struct C2S_PlayerInfoDefaultTypeInternal;
extern C2S_PlayerInfoDefaultTypeInternal _C2S_PlayerInfo_default_instance_;
class C2S_PlayerMove;
struct C2S_PlayerMoveDefaultTypeInternal;
extern C2S_PlayerMoveDefaultTypeInternal _C2S_PlayerMove_default_instance_;
class MessageHeader;
struct MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
class S2C_PlayerChat;
struct S2C_PlayerChatDefaultTypeInternal;
extern S2C_PlayerChatDefaultTypeInternal _S2C_PlayerChat_default_instance_;
class S2C_PlayerConnect;
struct S2C_PlayerConnectDefaultTypeInternal;
extern S2C_PlayerConnectDefaultTypeInternal _S2C_PlayerConnect_default_instance_;
class S2C_PlayerInfo;
struct S2C_PlayerInfoDefaultTypeInternal;
extern S2C_PlayerInfoDefaultTypeInternal _S2C_PlayerInfo_default_instance_;
class S2C_PlayerMove;
struct S2C_PlayerMoveDefaultTypeInternal;
extern S2C_PlayerMoveDefaultTypeInternal _S2C_PlayerMove_default_instance_;
}  // namespace PlayerProto
PROTOBUF_NAMESPACE_OPEN
template<> ::PlayerProto::C2S_PlayerChat* Arena::CreateMaybeMessage<::PlayerProto::C2S_PlayerChat>(Arena*);
template<> ::PlayerProto::C2S_PlayerConnect* Arena::CreateMaybeMessage<::PlayerProto::C2S_PlayerConnect>(Arena*);
template<> ::PlayerProto::C2S_PlayerDisconnect* Arena::CreateMaybeMessage<::PlayerProto::C2S_PlayerDisconnect>(Arena*);
template<> ::PlayerProto::C2S_PlayerInfo* Arena::CreateMaybeMessage<::PlayerProto::C2S_PlayerInfo>(Arena*);
template<> ::PlayerProto::C2S_PlayerMove* Arena::CreateMaybeMessage<::PlayerProto::C2S_PlayerMove>(Arena*);
template<> ::PlayerProto::MessageHeader* Arena::CreateMaybeMessage<::PlayerProto::MessageHeader>(Arena*);
template<> ::PlayerProto::S2C_PlayerChat* Arena::CreateMaybeMessage<::PlayerProto::S2C_PlayerChat>(Arena*);
template<> ::PlayerProto::S2C_PlayerConnect* Arena::CreateMaybeMessage<::PlayerProto::S2C_PlayerConnect>(Arena*);
template<> ::PlayerProto::S2C_PlayerInfo* Arena::CreateMaybeMessage<::PlayerProto::S2C_PlayerInfo>(Arena*);
template<> ::PlayerProto::S2C_PlayerMove* Arena::CreateMaybeMessage<::PlayerProto::S2C_PlayerMove>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PlayerProto {

enum MessageType : int {
  PLAYER_CONNECT = 0,
  PLAYER_DISCONNECT = 1,
  PLAYER_MOVE = 16,
  PLAYER_SHOP = 17,
  PLAYER_INFO = 18,
  PLAYER_CHAT = 19,
  PLAYER_ERROR = 144,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = PLAYER_CONNECT;
constexpr MessageType MessageType_MAX = PLAYER_ERROR;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum ErrorCode : int {
  SUCCESS = 0,
  UNKOWN_ERROR = 153,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = SUCCESS;
constexpr ErrorCode ErrorCode_MAX = UNKOWN_ERROR;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum ShopType : int {
  SHOP_BUY = 0,
  SHOP_SELL = 1,
  ShopType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ShopType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ShopType_IsValid(int value);
constexpr ShopType ShopType_MIN = SHOP_BUY;
constexpr ShopType ShopType_MAX = SHOP_SELL;
constexpr int ShopType_ARRAYSIZE = ShopType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShopType_descriptor();
template<typename T>
inline const std::string& ShopType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ShopType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ShopType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ShopType_descriptor(), enum_t_value);
}
inline bool ShopType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ShopType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShopType>(
    ShopType_descriptor(), name, value);
}
enum TradeStatus : int {
  TRADE_SUCCESS = 0,
  TRADE_NOTENOUGH_MONEY = 16,
  TRADE_NOTENOUGH_ITEM = 17,
  TRADE_OVERFLOW = 18,
  TRADE_NOTFOUND_ITEM = 19,
  TRADE_NOTFOUND_SHOP = 20,
  TRADE_UNKNOWN_ERROR = 25,
  TradeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TradeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TradeStatus_IsValid(int value);
constexpr TradeStatus TradeStatus_MIN = TRADE_SUCCESS;
constexpr TradeStatus TradeStatus_MAX = TRADE_UNKNOWN_ERROR;
constexpr int TradeStatus_ARRAYSIZE = TradeStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeStatus_descriptor();
template<typename T>
inline const std::string& TradeStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TradeStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TradeStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TradeStatus_descriptor(), enum_t_value);
}
inline bool TradeStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TradeStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TradeStatus>(
    TradeStatus_descriptor(), name, value);
}
// ===================================================================

class MessageHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerProto.MessageHeader) */ {
 public:
  inline MessageHeader() : MessageHeader(nullptr) {}
  ~MessageHeader() override;
  explicit constexpr MessageHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageHeader(const MessageHeader& from);
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MessageHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerProto.MessageHeader";
  }
  protected:
  explicit MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
    kPlayerIdFieldNumber = 3,
    kMessageTypeFieldNumber = 2,
    kMessageLengthFieldNumber = 4,
  };
  // int64 messageId = 1;
  void clear_messageid();
  int64_t messageid() const;
  void set_messageid(int64_t value);
  private:
  int64_t _internal_messageid() const;
  void _internal_set_messageid(int64_t value);
  public:

  // int64 playerId = 3;
  void clear_playerid();
  int64_t playerid() const;
  void set_playerid(int64_t value);
  private:
  int64_t _internal_playerid() const;
  void _internal_set_playerid(int64_t value);
  public:

  // .PlayerProto.MessageType messageType = 2;
  void clear_messagetype();
  ::PlayerProto::MessageType messagetype() const;
  void set_messagetype(::PlayerProto::MessageType value);
  private:
  ::PlayerProto::MessageType _internal_messagetype() const;
  void _internal_set_messagetype(::PlayerProto::MessageType value);
  public:

  // uint32 messageLength = 4;
  void clear_messagelength();
  uint32_t messagelength() const;
  void set_messagelength(uint32_t value);
  private:
  uint32_t _internal_messagelength() const;
  void _internal_set_messagelength(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerProto.MessageHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t messageid_;
  int64_t playerid_;
  int messagetype_;
  uint32_t messagelength_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlayerProto_2eproto;
};
// -------------------------------------------------------------------

class C2S_PlayerConnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerProto.C2S_PlayerConnect) */ {
 public:
  inline C2S_PlayerConnect() : C2S_PlayerConnect(nullptr) {}
  ~C2S_PlayerConnect() override;
  explicit constexpr C2S_PlayerConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_PlayerConnect(const C2S_PlayerConnect& from);
  C2S_PlayerConnect(C2S_PlayerConnect&& from) noexcept
    : C2S_PlayerConnect() {
    *this = ::std::move(from);
  }

  inline C2S_PlayerConnect& operator=(const C2S_PlayerConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_PlayerConnect& operator=(C2S_PlayerConnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_PlayerConnect& default_instance() {
    return *internal_default_instance();
  }
  enum BodyCase {
    kPlayerName = 2,
    BODY_NOT_SET = 0,
  };

  static inline const C2S_PlayerConnect* internal_default_instance() {
    return reinterpret_cast<const C2S_PlayerConnect*>(
               &_C2S_PlayerConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C2S_PlayerConnect& a, C2S_PlayerConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_PlayerConnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_PlayerConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_PlayerConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_PlayerConnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_PlayerConnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_PlayerConnect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_PlayerConnect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerProto.C2S_PlayerConnect";
  }
  protected:
  explicit C2S_PlayerConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPlayerNameFieldNumber = 2,
  };
  // .PlayerProto.MessageHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::PlayerProto::MessageHeader& header() const;
  PROTOBUF_NODISCARD ::PlayerProto::MessageHeader* release_header();
  ::PlayerProto::MessageHeader* mutable_header();
  void set_allocated_header(::PlayerProto::MessageHeader* header);
  private:
  const ::PlayerProto::MessageHeader& _internal_header() const;
  ::PlayerProto::MessageHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::PlayerProto::MessageHeader* header);
  ::PlayerProto::MessageHeader* unsafe_arena_release_header();

  // string playerName = 2;
  bool has_playername() const;
  private:
  bool _internal_has_playername() const;
  public:
  void clear_playername();
  const std::string& playername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playername();
  PROTOBUF_NODISCARD std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  void clear_body();
  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:PlayerProto.C2S_PlayerConnect)
 private:
  class _Internal;
  void set_has_playername();

  inline bool has_body() const;
  inline void clear_has_body();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlayerProto::MessageHeader* header_;
  union BodyUnion {
    constexpr BodyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
  } body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_PlayerProto_2eproto;
};
// -------------------------------------------------------------------

class S2C_PlayerConnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerProto.S2C_PlayerConnect) */ {
 public:
  inline S2C_PlayerConnect() : S2C_PlayerConnect(nullptr) {}
  ~S2C_PlayerConnect() override;
  explicit constexpr S2C_PlayerConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_PlayerConnect(const S2C_PlayerConnect& from);
  S2C_PlayerConnect(S2C_PlayerConnect&& from) noexcept
    : S2C_PlayerConnect() {
    *this = ::std::move(from);
  }

  inline S2C_PlayerConnect& operator=(const S2C_PlayerConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_PlayerConnect& operator=(S2C_PlayerConnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_PlayerConnect& default_instance() {
    return *internal_default_instance();
  }
  enum BodyCase {
    kRes = 2,
    BODY_NOT_SET = 0,
  };

  static inline const S2C_PlayerConnect* internal_default_instance() {
    return reinterpret_cast<const S2C_PlayerConnect*>(
               &_S2C_PlayerConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S2C_PlayerConnect& a, S2C_PlayerConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_PlayerConnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_PlayerConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_PlayerConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_PlayerConnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_PlayerConnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_PlayerConnect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_PlayerConnect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerProto.S2C_PlayerConnect";
  }
  protected:
  explicit S2C_PlayerConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kResFieldNumber = 2,
  };
  // .PlayerProto.MessageHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::PlayerProto::MessageHeader& header() const;
  PROTOBUF_NODISCARD ::PlayerProto::MessageHeader* release_header();
  ::PlayerProto::MessageHeader* mutable_header();
  void set_allocated_header(::PlayerProto::MessageHeader* header);
  private:
  const ::PlayerProto::MessageHeader& _internal_header() const;
  ::PlayerProto::MessageHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::PlayerProto::MessageHeader* header);
  ::PlayerProto::MessageHeader* unsafe_arena_release_header();

  // string res = 2;
  bool has_res() const;
  private:
  bool _internal_has_res() const;
  public:
  void clear_res();
  const std::string& res() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res();
  PROTOBUF_NODISCARD std::string* release_res();
  void set_allocated_res(std::string* res);
  private:
  const std::string& _internal_res() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res(const std::string& value);
  std::string* _internal_mutable_res();
  public:

  void clear_body();
  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:PlayerProto.S2C_PlayerConnect)
 private:
  class _Internal;
  void set_has_res();

  inline bool has_body() const;
  inline void clear_has_body();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlayerProto::MessageHeader* header_;
  union BodyUnion {
    constexpr BodyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_;
  } body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_PlayerProto_2eproto;
};
// -------------------------------------------------------------------

class C2S_PlayerDisconnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerProto.C2S_PlayerDisconnect) */ {
 public:
  inline C2S_PlayerDisconnect() : C2S_PlayerDisconnect(nullptr) {}
  ~C2S_PlayerDisconnect() override;
  explicit constexpr C2S_PlayerDisconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_PlayerDisconnect(const C2S_PlayerDisconnect& from);
  C2S_PlayerDisconnect(C2S_PlayerDisconnect&& from) noexcept
    : C2S_PlayerDisconnect() {
    *this = ::std::move(from);
  }

  inline C2S_PlayerDisconnect& operator=(const C2S_PlayerDisconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_PlayerDisconnect& operator=(C2S_PlayerDisconnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_PlayerDisconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_PlayerDisconnect* internal_default_instance() {
    return reinterpret_cast<const C2S_PlayerDisconnect*>(
               &_C2S_PlayerDisconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C2S_PlayerDisconnect& a, C2S_PlayerDisconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_PlayerDisconnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_PlayerDisconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_PlayerDisconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_PlayerDisconnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_PlayerDisconnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_PlayerDisconnect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_PlayerDisconnect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerProto.C2S_PlayerDisconnect";
  }
  protected:
  explicit C2S_PlayerDisconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .PlayerProto.MessageHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::PlayerProto::MessageHeader& header() const;
  PROTOBUF_NODISCARD ::PlayerProto::MessageHeader* release_header();
  ::PlayerProto::MessageHeader* mutable_header();
  void set_allocated_header(::PlayerProto::MessageHeader* header);
  private:
  const ::PlayerProto::MessageHeader& _internal_header() const;
  ::PlayerProto::MessageHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::PlayerProto::MessageHeader* header);
  ::PlayerProto::MessageHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:PlayerProto.C2S_PlayerDisconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlayerProto::MessageHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlayerProto_2eproto;
};
// -------------------------------------------------------------------

class C2S_PlayerMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerProto.C2S_PlayerMove) */ {
 public:
  inline C2S_PlayerMove() : C2S_PlayerMove(nullptr) {}
  ~C2S_PlayerMove() override;
  explicit constexpr C2S_PlayerMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_PlayerMove(const C2S_PlayerMove& from);
  C2S_PlayerMove(C2S_PlayerMove&& from) noexcept
    : C2S_PlayerMove() {
    *this = ::std::move(from);
  }

  inline C2S_PlayerMove& operator=(const C2S_PlayerMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_PlayerMove& operator=(C2S_PlayerMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_PlayerMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_PlayerMove* internal_default_instance() {
    return reinterpret_cast<const C2S_PlayerMove*>(
               &_C2S_PlayerMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C2S_PlayerMove& a, C2S_PlayerMove& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_PlayerMove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_PlayerMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_PlayerMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_PlayerMove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_PlayerMove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_PlayerMove& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_PlayerMove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerProto.C2S_PlayerMove";
  }
  protected:
  explicit C2S_PlayerMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .PlayerProto.MessageHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::PlayerProto::MessageHeader& header() const;
  PROTOBUF_NODISCARD ::PlayerProto::MessageHeader* release_header();
  ::PlayerProto::MessageHeader* mutable_header();
  void set_allocated_header(::PlayerProto::MessageHeader* header);
  private:
  const ::PlayerProto::MessageHeader& _internal_header() const;
  ::PlayerProto::MessageHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::PlayerProto::MessageHeader* header);
  ::PlayerProto::MessageHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:PlayerProto.C2S_PlayerMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlayerProto::MessageHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlayerProto_2eproto;
};
// -------------------------------------------------------------------

class S2C_PlayerMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerProto.S2C_PlayerMove) */ {
 public:
  inline S2C_PlayerMove() : S2C_PlayerMove(nullptr) {}
  ~S2C_PlayerMove() override;
  explicit constexpr S2C_PlayerMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_PlayerMove(const S2C_PlayerMove& from);
  S2C_PlayerMove(S2C_PlayerMove&& from) noexcept
    : S2C_PlayerMove() {
    *this = ::std::move(from);
  }

  inline S2C_PlayerMove& operator=(const S2C_PlayerMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_PlayerMove& operator=(S2C_PlayerMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_PlayerMove& default_instance() {
    return *internal_default_instance();
  }
  enum BodyCase {
    kX = 2,
    kY = 3,
    kZ = 4,
    BODY_NOT_SET = 0,
  };

  static inline const S2C_PlayerMove* internal_default_instance() {
    return reinterpret_cast<const S2C_PlayerMove*>(
               &_S2C_PlayerMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S2C_PlayerMove& a, S2C_PlayerMove& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_PlayerMove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_PlayerMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_PlayerMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_PlayerMove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_PlayerMove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_PlayerMove& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_PlayerMove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerProto.S2C_PlayerMove";
  }
  protected:
  explicit S2C_PlayerMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // .PlayerProto.MessageHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::PlayerProto::MessageHeader& header() const;
  PROTOBUF_NODISCARD ::PlayerProto::MessageHeader* release_header();
  ::PlayerProto::MessageHeader* mutable_header();
  void set_allocated_header(::PlayerProto::MessageHeader* header);
  private:
  const ::PlayerProto::MessageHeader& _internal_header() const;
  ::PlayerProto::MessageHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::PlayerProto::MessageHeader* header);
  ::PlayerProto::MessageHeader* unsafe_arena_release_header();

  // int32 x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 z = 4;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  void clear_body();
  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:PlayerProto.S2C_PlayerMove)
 private:
  class _Internal;
  void set_has_x();
  void set_has_y();
  void set_has_z();

  inline bool has_body() const;
  inline void clear_has_body();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlayerProto::MessageHeader* header_;
  union BodyUnion {
    constexpr BodyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int32_t x_;
    int32_t y_;
    int32_t z_;
  } body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_PlayerProto_2eproto;
};
// -------------------------------------------------------------------

class C2S_PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerProto.C2S_PlayerInfo) */ {
 public:
  inline C2S_PlayerInfo() : C2S_PlayerInfo(nullptr) {}
  ~C2S_PlayerInfo() override;
  explicit constexpr C2S_PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_PlayerInfo(const C2S_PlayerInfo& from);
  C2S_PlayerInfo(C2S_PlayerInfo&& from) noexcept
    : C2S_PlayerInfo() {
    *this = ::std::move(from);
  }

  inline C2S_PlayerInfo& operator=(const C2S_PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_PlayerInfo& operator=(C2S_PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const C2S_PlayerInfo*>(
               &_C2S_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C2S_PlayerInfo& a, C2S_PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_PlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_PlayerInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_PlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerProto.C2S_PlayerInfo";
  }
  protected:
  explicit C2S_PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .PlayerProto.MessageHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::PlayerProto::MessageHeader& header() const;
  PROTOBUF_NODISCARD ::PlayerProto::MessageHeader* release_header();
  ::PlayerProto::MessageHeader* mutable_header();
  void set_allocated_header(::PlayerProto::MessageHeader* header);
  private:
  const ::PlayerProto::MessageHeader& _internal_header() const;
  ::PlayerProto::MessageHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::PlayerProto::MessageHeader* header);
  ::PlayerProto::MessageHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:PlayerProto.C2S_PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlayerProto::MessageHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlayerProto_2eproto;
};
// -------------------------------------------------------------------

class S2C_PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerProto.S2C_PlayerInfo) */ {
 public:
  inline S2C_PlayerInfo() : S2C_PlayerInfo(nullptr) {}
  ~S2C_PlayerInfo() override;
  explicit constexpr S2C_PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_PlayerInfo(const S2C_PlayerInfo& from);
  S2C_PlayerInfo(S2C_PlayerInfo&& from) noexcept
    : S2C_PlayerInfo() {
    *this = ::std::move(from);
  }

  inline S2C_PlayerInfo& operator=(const S2C_PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_PlayerInfo& operator=(S2C_PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  enum BodyCase {
    kPlayerName = 2,
    kLevel = 3,
    kMoney = 4,
    BODY_NOT_SET = 0,
  };

  static inline const S2C_PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const S2C_PlayerInfo*>(
               &_S2C_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S2C_PlayerInfo& a, S2C_PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_PlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_PlayerInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_PlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerProto.S2C_PlayerInfo";
  }
  protected:
  explicit S2C_PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPlayerNameFieldNumber = 2,
    kLevelFieldNumber = 3,
    kMoneyFieldNumber = 4,
  };
  // .PlayerProto.MessageHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::PlayerProto::MessageHeader& header() const;
  PROTOBUF_NODISCARD ::PlayerProto::MessageHeader* release_header();
  ::PlayerProto::MessageHeader* mutable_header();
  void set_allocated_header(::PlayerProto::MessageHeader* header);
  private:
  const ::PlayerProto::MessageHeader& _internal_header() const;
  ::PlayerProto::MessageHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::PlayerProto::MessageHeader* header);
  ::PlayerProto::MessageHeader* unsafe_arena_release_header();

  // string playerName = 2;
  bool has_playername() const;
  private:
  bool _internal_has_playername() const;
  public:
  void clear_playername();
  const std::string& playername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playername();
  PROTOBUF_NODISCARD std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // int32 level = 3;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 money = 4;
  bool has_money() const;
  private:
  bool _internal_has_money() const;
  public:
  void clear_money();
  int32_t money() const;
  void set_money(int32_t value);
  private:
  int32_t _internal_money() const;
  void _internal_set_money(int32_t value);
  public:

  void clear_body();
  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:PlayerProto.S2C_PlayerInfo)
 private:
  class _Internal;
  void set_has_playername();
  void set_has_level();
  void set_has_money();

  inline bool has_body() const;
  inline void clear_has_body();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlayerProto::MessageHeader* header_;
  union BodyUnion {
    constexpr BodyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
    int32_t level_;
    int32_t money_;
  } body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_PlayerProto_2eproto;
};
// -------------------------------------------------------------------

class C2S_PlayerChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerProto.C2S_PlayerChat) */ {
 public:
  inline C2S_PlayerChat() : C2S_PlayerChat(nullptr) {}
  ~C2S_PlayerChat() override;
  explicit constexpr C2S_PlayerChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_PlayerChat(const C2S_PlayerChat& from);
  C2S_PlayerChat(C2S_PlayerChat&& from) noexcept
    : C2S_PlayerChat() {
    *this = ::std::move(from);
  }

  inline C2S_PlayerChat& operator=(const C2S_PlayerChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_PlayerChat& operator=(C2S_PlayerChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_PlayerChat& default_instance() {
    return *internal_default_instance();
  }
  enum BodyCase {
    kChat = 2,
    BODY_NOT_SET = 0,
  };

  static inline const C2S_PlayerChat* internal_default_instance() {
    return reinterpret_cast<const C2S_PlayerChat*>(
               &_C2S_PlayerChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C2S_PlayerChat& a, C2S_PlayerChat& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_PlayerChat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_PlayerChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_PlayerChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_PlayerChat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_PlayerChat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_PlayerChat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_PlayerChat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerProto.C2S_PlayerChat";
  }
  protected:
  explicit C2S_PlayerChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kChatFieldNumber = 2,
  };
  // .PlayerProto.MessageHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::PlayerProto::MessageHeader& header() const;
  PROTOBUF_NODISCARD ::PlayerProto::MessageHeader* release_header();
  ::PlayerProto::MessageHeader* mutable_header();
  void set_allocated_header(::PlayerProto::MessageHeader* header);
  private:
  const ::PlayerProto::MessageHeader& _internal_header() const;
  ::PlayerProto::MessageHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::PlayerProto::MessageHeader* header);
  ::PlayerProto::MessageHeader* unsafe_arena_release_header();

  // string chat = 2;
  bool has_chat() const;
  private:
  bool _internal_has_chat() const;
  public:
  void clear_chat();
  const std::string& chat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat();
  PROTOBUF_NODISCARD std::string* release_chat();
  void set_allocated_chat(std::string* chat);
  private:
  const std::string& _internal_chat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat(const std::string& value);
  std::string* _internal_mutable_chat();
  public:

  void clear_body();
  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:PlayerProto.C2S_PlayerChat)
 private:
  class _Internal;
  void set_has_chat();

  inline bool has_body() const;
  inline void clear_has_body();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlayerProto::MessageHeader* header_;
  union BodyUnion {
    constexpr BodyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_;
  } body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_PlayerProto_2eproto;
};
// -------------------------------------------------------------------

class S2C_PlayerChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerProto.S2C_PlayerChat) */ {
 public:
  inline S2C_PlayerChat() : S2C_PlayerChat(nullptr) {}
  ~S2C_PlayerChat() override;
  explicit constexpr S2C_PlayerChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_PlayerChat(const S2C_PlayerChat& from);
  S2C_PlayerChat(S2C_PlayerChat&& from) noexcept
    : S2C_PlayerChat() {
    *this = ::std::move(from);
  }

  inline S2C_PlayerChat& operator=(const S2C_PlayerChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_PlayerChat& operator=(S2C_PlayerChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_PlayerChat& default_instance() {
    return *internal_default_instance();
  }
  enum BodyCase {
    kPlayerId = 2,
    kChat = 3,
    BODY_NOT_SET = 0,
  };

  static inline const S2C_PlayerChat* internal_default_instance() {
    return reinterpret_cast<const S2C_PlayerChat*>(
               &_S2C_PlayerChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S2C_PlayerChat& a, S2C_PlayerChat& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_PlayerChat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_PlayerChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_PlayerChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_PlayerChat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_PlayerChat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_PlayerChat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_PlayerChat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerProto.S2C_PlayerChat";
  }
  protected:
  explicit S2C_PlayerChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kChatFieldNumber = 3,
  };
  // .PlayerProto.MessageHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::PlayerProto::MessageHeader& header() const;
  PROTOBUF_NODISCARD ::PlayerProto::MessageHeader* release_header();
  ::PlayerProto::MessageHeader* mutable_header();
  void set_allocated_header(::PlayerProto::MessageHeader* header);
  private:
  const ::PlayerProto::MessageHeader& _internal_header() const;
  ::PlayerProto::MessageHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::PlayerProto::MessageHeader* header);
  ::PlayerProto::MessageHeader* unsafe_arena_release_header();

  // int64 playerId = 2;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  int64_t playerid() const;
  void set_playerid(int64_t value);
  private:
  int64_t _internal_playerid() const;
  void _internal_set_playerid(int64_t value);
  public:

  // string chat = 3;
  bool has_chat() const;
  private:
  bool _internal_has_chat() const;
  public:
  void clear_chat();
  const std::string& chat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat();
  PROTOBUF_NODISCARD std::string* release_chat();
  void set_allocated_chat(std::string* chat);
  private:
  const std::string& _internal_chat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat(const std::string& value);
  std::string* _internal_mutable_chat();
  public:

  void clear_body();
  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:PlayerProto.S2C_PlayerChat)
 private:
  class _Internal;
  void set_has_playerid();
  void set_has_chat();

  inline bool has_body() const;
  inline void clear_has_body();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlayerProto::MessageHeader* header_;
  union BodyUnion {
    constexpr BodyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int64_t playerid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_;
  } body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_PlayerProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageHeader

// int64 messageId = 1;
inline void MessageHeader::clear_messageid() {
  messageid_ = int64_t{0};
}
inline int64_t MessageHeader::_internal_messageid() const {
  return messageid_;
}
inline int64_t MessageHeader::messageid() const {
  // @@protoc_insertion_point(field_get:PlayerProto.MessageHeader.messageId)
  return _internal_messageid();
}
inline void MessageHeader::_internal_set_messageid(int64_t value) {
  
  messageid_ = value;
}
inline void MessageHeader::set_messageid(int64_t value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:PlayerProto.MessageHeader.messageId)
}

// .PlayerProto.MessageType messageType = 2;
inline void MessageHeader::clear_messagetype() {
  messagetype_ = 0;
}
inline ::PlayerProto::MessageType MessageHeader::_internal_messagetype() const {
  return static_cast< ::PlayerProto::MessageType >(messagetype_);
}
inline ::PlayerProto::MessageType MessageHeader::messagetype() const {
  // @@protoc_insertion_point(field_get:PlayerProto.MessageHeader.messageType)
  return _internal_messagetype();
}
inline void MessageHeader::_internal_set_messagetype(::PlayerProto::MessageType value) {
  
  messagetype_ = value;
}
inline void MessageHeader::set_messagetype(::PlayerProto::MessageType value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:PlayerProto.MessageHeader.messageType)
}

// int64 playerId = 3;
inline void MessageHeader::clear_playerid() {
  playerid_ = int64_t{0};
}
inline int64_t MessageHeader::_internal_playerid() const {
  return playerid_;
}
inline int64_t MessageHeader::playerid() const {
  // @@protoc_insertion_point(field_get:PlayerProto.MessageHeader.playerId)
  return _internal_playerid();
}
inline void MessageHeader::_internal_set_playerid(int64_t value) {
  
  playerid_ = value;
}
inline void MessageHeader::set_playerid(int64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:PlayerProto.MessageHeader.playerId)
}

// uint32 messageLength = 4;
inline void MessageHeader::clear_messagelength() {
  messagelength_ = 0u;
}
inline uint32_t MessageHeader::_internal_messagelength() const {
  return messagelength_;
}
inline uint32_t MessageHeader::messagelength() const {
  // @@protoc_insertion_point(field_get:PlayerProto.MessageHeader.messageLength)
  return _internal_messagelength();
}
inline void MessageHeader::_internal_set_messagelength(uint32_t value) {
  
  messagelength_ = value;
}
inline void MessageHeader::set_messagelength(uint32_t value) {
  _internal_set_messagelength(value);
  // @@protoc_insertion_point(field_set:PlayerProto.MessageHeader.messageLength)
}

// -------------------------------------------------------------------

// C2S_PlayerConnect

// .PlayerProto.MessageHeader header = 1;
inline bool C2S_PlayerConnect::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool C2S_PlayerConnect::has_header() const {
  return _internal_has_header();
}
inline void C2S_PlayerConnect::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::PlayerProto::MessageHeader& C2S_PlayerConnect::_internal_header() const {
  const ::PlayerProto::MessageHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerProto::MessageHeader&>(
      ::PlayerProto::_MessageHeader_default_instance_);
}
inline const ::PlayerProto::MessageHeader& C2S_PlayerConnect::header() const {
  // @@protoc_insertion_point(field_get:PlayerProto.C2S_PlayerConnect.header)
  return _internal_header();
}
inline void C2S_PlayerConnect::unsafe_arena_set_allocated_header(
    ::PlayerProto::MessageHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerProto.C2S_PlayerConnect.header)
}
inline ::PlayerProto::MessageHeader* C2S_PlayerConnect::release_header() {
  
  ::PlayerProto::MessageHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerProto::MessageHeader* C2S_PlayerConnect::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:PlayerProto.C2S_PlayerConnect.header)
  
  ::PlayerProto::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::PlayerProto::MessageHeader* C2S_PlayerConnect::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerProto::MessageHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::PlayerProto::MessageHeader* C2S_PlayerConnect::mutable_header() {
  ::PlayerProto::MessageHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:PlayerProto.C2S_PlayerConnect.header)
  return _msg;
}
inline void C2S_PlayerConnect::set_allocated_header(::PlayerProto::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PlayerProto::MessageHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.C2S_PlayerConnect.header)
}

// string playerName = 2;
inline bool C2S_PlayerConnect::_internal_has_playername() const {
  return body_case() == kPlayerName;
}
inline bool C2S_PlayerConnect::has_playername() const {
  return _internal_has_playername();
}
inline void C2S_PlayerConnect::set_has_playername() {
  _oneof_case_[0] = kPlayerName;
}
inline void C2S_PlayerConnect::clear_playername() {
  if (_internal_has_playername()) {
    body_.playername_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_body();
  }
}
inline const std::string& C2S_PlayerConnect::playername() const {
  // @@protoc_insertion_point(field_get:PlayerProto.C2S_PlayerConnect.playerName)
  return _internal_playername();
}
template <typename ArgT0, typename... ArgT>
inline void C2S_PlayerConnect::set_playername(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_playername()) {
    clear_body();
    set_has_playername();
    body_.playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PlayerProto.C2S_PlayerConnect.playerName)
}
inline std::string* C2S_PlayerConnect::mutable_playername() {
  std::string* _s = _internal_mutable_playername();
  // @@protoc_insertion_point(field_mutable:PlayerProto.C2S_PlayerConnect.playerName)
  return _s;
}
inline const std::string& C2S_PlayerConnect::_internal_playername() const {
  if (_internal_has_playername()) {
    return body_.playername_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void C2S_PlayerConnect::_internal_set_playername(const std::string& value) {
  if (!_internal_has_playername()) {
    clear_body();
    set_has_playername();
    body_.playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_PlayerConnect::_internal_mutable_playername() {
  if (!_internal_has_playername()) {
    clear_body();
    set_has_playername();
    body_.playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return body_.playername_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_PlayerConnect::release_playername() {
  // @@protoc_insertion_point(field_release:PlayerProto.C2S_PlayerConnect.playerName)
  if (_internal_has_playername()) {
    clear_has_body();
    return body_.playername_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void C2S_PlayerConnect::set_allocated_playername(std::string* playername) {
  if (has_body()) {
    clear_body();
  }
  if (playername != nullptr) {
    set_has_playername();
    body_.playername_.UnsafeSetDefault(playername);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(playername);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.C2S_PlayerConnect.playerName)
}

inline bool C2S_PlayerConnect::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void C2S_PlayerConnect::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline C2S_PlayerConnect::BodyCase C2S_PlayerConnect::body_case() const {
  return C2S_PlayerConnect::BodyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// S2C_PlayerConnect

// .PlayerProto.MessageHeader header = 1;
inline bool S2C_PlayerConnect::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool S2C_PlayerConnect::has_header() const {
  return _internal_has_header();
}
inline void S2C_PlayerConnect::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::PlayerProto::MessageHeader& S2C_PlayerConnect::_internal_header() const {
  const ::PlayerProto::MessageHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerProto::MessageHeader&>(
      ::PlayerProto::_MessageHeader_default_instance_);
}
inline const ::PlayerProto::MessageHeader& S2C_PlayerConnect::header() const {
  // @@protoc_insertion_point(field_get:PlayerProto.S2C_PlayerConnect.header)
  return _internal_header();
}
inline void S2C_PlayerConnect::unsafe_arena_set_allocated_header(
    ::PlayerProto::MessageHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerProto.S2C_PlayerConnect.header)
}
inline ::PlayerProto::MessageHeader* S2C_PlayerConnect::release_header() {
  
  ::PlayerProto::MessageHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerProto::MessageHeader* S2C_PlayerConnect::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:PlayerProto.S2C_PlayerConnect.header)
  
  ::PlayerProto::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::PlayerProto::MessageHeader* S2C_PlayerConnect::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerProto::MessageHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::PlayerProto::MessageHeader* S2C_PlayerConnect::mutable_header() {
  ::PlayerProto::MessageHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:PlayerProto.S2C_PlayerConnect.header)
  return _msg;
}
inline void S2C_PlayerConnect::set_allocated_header(::PlayerProto::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PlayerProto::MessageHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.S2C_PlayerConnect.header)
}

// string res = 2;
inline bool S2C_PlayerConnect::_internal_has_res() const {
  return body_case() == kRes;
}
inline bool S2C_PlayerConnect::has_res() const {
  return _internal_has_res();
}
inline void S2C_PlayerConnect::set_has_res() {
  _oneof_case_[0] = kRes;
}
inline void S2C_PlayerConnect::clear_res() {
  if (_internal_has_res()) {
    body_.res_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_body();
  }
}
inline const std::string& S2C_PlayerConnect::res() const {
  // @@protoc_insertion_point(field_get:PlayerProto.S2C_PlayerConnect.res)
  return _internal_res();
}
template <typename ArgT0, typename... ArgT>
inline void S2C_PlayerConnect::set_res(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_res()) {
    clear_body();
    set_has_res();
    body_.res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PlayerProto.S2C_PlayerConnect.res)
}
inline std::string* S2C_PlayerConnect::mutable_res() {
  std::string* _s = _internal_mutable_res();
  // @@protoc_insertion_point(field_mutable:PlayerProto.S2C_PlayerConnect.res)
  return _s;
}
inline const std::string& S2C_PlayerConnect::_internal_res() const {
  if (_internal_has_res()) {
    return body_.res_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void S2C_PlayerConnect::_internal_set_res(const std::string& value) {
  if (!_internal_has_res()) {
    clear_body();
    set_has_res();
    body_.res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S2C_PlayerConnect::_internal_mutable_res() {
  if (!_internal_has_res()) {
    clear_body();
    set_has_res();
    body_.res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return body_.res_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S2C_PlayerConnect::release_res() {
  // @@protoc_insertion_point(field_release:PlayerProto.S2C_PlayerConnect.res)
  if (_internal_has_res()) {
    clear_has_body();
    return body_.res_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void S2C_PlayerConnect::set_allocated_res(std::string* res) {
  if (has_body()) {
    clear_body();
  }
  if (res != nullptr) {
    set_has_res();
    body_.res_.UnsafeSetDefault(res);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(res);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.S2C_PlayerConnect.res)
}

inline bool S2C_PlayerConnect::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void S2C_PlayerConnect::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline S2C_PlayerConnect::BodyCase S2C_PlayerConnect::body_case() const {
  return S2C_PlayerConnect::BodyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// C2S_PlayerDisconnect

// .PlayerProto.MessageHeader header = 1;
inline bool C2S_PlayerDisconnect::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool C2S_PlayerDisconnect::has_header() const {
  return _internal_has_header();
}
inline void C2S_PlayerDisconnect::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::PlayerProto::MessageHeader& C2S_PlayerDisconnect::_internal_header() const {
  const ::PlayerProto::MessageHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerProto::MessageHeader&>(
      ::PlayerProto::_MessageHeader_default_instance_);
}
inline const ::PlayerProto::MessageHeader& C2S_PlayerDisconnect::header() const {
  // @@protoc_insertion_point(field_get:PlayerProto.C2S_PlayerDisconnect.header)
  return _internal_header();
}
inline void C2S_PlayerDisconnect::unsafe_arena_set_allocated_header(
    ::PlayerProto::MessageHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerProto.C2S_PlayerDisconnect.header)
}
inline ::PlayerProto::MessageHeader* C2S_PlayerDisconnect::release_header() {
  
  ::PlayerProto::MessageHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerProto::MessageHeader* C2S_PlayerDisconnect::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:PlayerProto.C2S_PlayerDisconnect.header)
  
  ::PlayerProto::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::PlayerProto::MessageHeader* C2S_PlayerDisconnect::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerProto::MessageHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::PlayerProto::MessageHeader* C2S_PlayerDisconnect::mutable_header() {
  ::PlayerProto::MessageHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:PlayerProto.C2S_PlayerDisconnect.header)
  return _msg;
}
inline void C2S_PlayerDisconnect::set_allocated_header(::PlayerProto::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PlayerProto::MessageHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.C2S_PlayerDisconnect.header)
}

// -------------------------------------------------------------------

// C2S_PlayerMove

// .PlayerProto.MessageHeader header = 1;
inline bool C2S_PlayerMove::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool C2S_PlayerMove::has_header() const {
  return _internal_has_header();
}
inline void C2S_PlayerMove::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::PlayerProto::MessageHeader& C2S_PlayerMove::_internal_header() const {
  const ::PlayerProto::MessageHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerProto::MessageHeader&>(
      ::PlayerProto::_MessageHeader_default_instance_);
}
inline const ::PlayerProto::MessageHeader& C2S_PlayerMove::header() const {
  // @@protoc_insertion_point(field_get:PlayerProto.C2S_PlayerMove.header)
  return _internal_header();
}
inline void C2S_PlayerMove::unsafe_arena_set_allocated_header(
    ::PlayerProto::MessageHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerProto.C2S_PlayerMove.header)
}
inline ::PlayerProto::MessageHeader* C2S_PlayerMove::release_header() {
  
  ::PlayerProto::MessageHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerProto::MessageHeader* C2S_PlayerMove::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:PlayerProto.C2S_PlayerMove.header)
  
  ::PlayerProto::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::PlayerProto::MessageHeader* C2S_PlayerMove::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerProto::MessageHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::PlayerProto::MessageHeader* C2S_PlayerMove::mutable_header() {
  ::PlayerProto::MessageHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:PlayerProto.C2S_PlayerMove.header)
  return _msg;
}
inline void C2S_PlayerMove::set_allocated_header(::PlayerProto::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PlayerProto::MessageHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.C2S_PlayerMove.header)
}

// -------------------------------------------------------------------

// S2C_PlayerMove

// .PlayerProto.MessageHeader header = 1;
inline bool S2C_PlayerMove::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool S2C_PlayerMove::has_header() const {
  return _internal_has_header();
}
inline void S2C_PlayerMove::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::PlayerProto::MessageHeader& S2C_PlayerMove::_internal_header() const {
  const ::PlayerProto::MessageHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerProto::MessageHeader&>(
      ::PlayerProto::_MessageHeader_default_instance_);
}
inline const ::PlayerProto::MessageHeader& S2C_PlayerMove::header() const {
  // @@protoc_insertion_point(field_get:PlayerProto.S2C_PlayerMove.header)
  return _internal_header();
}
inline void S2C_PlayerMove::unsafe_arena_set_allocated_header(
    ::PlayerProto::MessageHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerProto.S2C_PlayerMove.header)
}
inline ::PlayerProto::MessageHeader* S2C_PlayerMove::release_header() {
  
  ::PlayerProto::MessageHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerProto::MessageHeader* S2C_PlayerMove::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:PlayerProto.S2C_PlayerMove.header)
  
  ::PlayerProto::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::PlayerProto::MessageHeader* S2C_PlayerMove::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerProto::MessageHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::PlayerProto::MessageHeader* S2C_PlayerMove::mutable_header() {
  ::PlayerProto::MessageHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:PlayerProto.S2C_PlayerMove.header)
  return _msg;
}
inline void S2C_PlayerMove::set_allocated_header(::PlayerProto::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PlayerProto::MessageHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.S2C_PlayerMove.header)
}

// int32 x = 2;
inline bool S2C_PlayerMove::_internal_has_x() const {
  return body_case() == kX;
}
inline bool S2C_PlayerMove::has_x() const {
  return _internal_has_x();
}
inline void S2C_PlayerMove::set_has_x() {
  _oneof_case_[0] = kX;
}
inline void S2C_PlayerMove::clear_x() {
  if (_internal_has_x()) {
    body_.x_ = 0;
    clear_has_body();
  }
}
inline int32_t S2C_PlayerMove::_internal_x() const {
  if (_internal_has_x()) {
    return body_.x_;
  }
  return 0;
}
inline void S2C_PlayerMove::_internal_set_x(int32_t value) {
  if (!_internal_has_x()) {
    clear_body();
    set_has_x();
  }
  body_.x_ = value;
}
inline int32_t S2C_PlayerMove::x() const {
  // @@protoc_insertion_point(field_get:PlayerProto.S2C_PlayerMove.x)
  return _internal_x();
}
inline void S2C_PlayerMove::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PlayerProto.S2C_PlayerMove.x)
}

// int32 y = 3;
inline bool S2C_PlayerMove::_internal_has_y() const {
  return body_case() == kY;
}
inline bool S2C_PlayerMove::has_y() const {
  return _internal_has_y();
}
inline void S2C_PlayerMove::set_has_y() {
  _oneof_case_[0] = kY;
}
inline void S2C_PlayerMove::clear_y() {
  if (_internal_has_y()) {
    body_.y_ = 0;
    clear_has_body();
  }
}
inline int32_t S2C_PlayerMove::_internal_y() const {
  if (_internal_has_y()) {
    return body_.y_;
  }
  return 0;
}
inline void S2C_PlayerMove::_internal_set_y(int32_t value) {
  if (!_internal_has_y()) {
    clear_body();
    set_has_y();
  }
  body_.y_ = value;
}
inline int32_t S2C_PlayerMove::y() const {
  // @@protoc_insertion_point(field_get:PlayerProto.S2C_PlayerMove.y)
  return _internal_y();
}
inline void S2C_PlayerMove::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PlayerProto.S2C_PlayerMove.y)
}

// int32 z = 4;
inline bool S2C_PlayerMove::_internal_has_z() const {
  return body_case() == kZ;
}
inline bool S2C_PlayerMove::has_z() const {
  return _internal_has_z();
}
inline void S2C_PlayerMove::set_has_z() {
  _oneof_case_[0] = kZ;
}
inline void S2C_PlayerMove::clear_z() {
  if (_internal_has_z()) {
    body_.z_ = 0;
    clear_has_body();
  }
}
inline int32_t S2C_PlayerMove::_internal_z() const {
  if (_internal_has_z()) {
    return body_.z_;
  }
  return 0;
}
inline void S2C_PlayerMove::_internal_set_z(int32_t value) {
  if (!_internal_has_z()) {
    clear_body();
    set_has_z();
  }
  body_.z_ = value;
}
inline int32_t S2C_PlayerMove::z() const {
  // @@protoc_insertion_point(field_get:PlayerProto.S2C_PlayerMove.z)
  return _internal_z();
}
inline void S2C_PlayerMove::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:PlayerProto.S2C_PlayerMove.z)
}

inline bool S2C_PlayerMove::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void S2C_PlayerMove::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline S2C_PlayerMove::BodyCase S2C_PlayerMove::body_case() const {
  return S2C_PlayerMove::BodyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// C2S_PlayerInfo

// .PlayerProto.MessageHeader header = 1;
inline bool C2S_PlayerInfo::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool C2S_PlayerInfo::has_header() const {
  return _internal_has_header();
}
inline void C2S_PlayerInfo::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::PlayerProto::MessageHeader& C2S_PlayerInfo::_internal_header() const {
  const ::PlayerProto::MessageHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerProto::MessageHeader&>(
      ::PlayerProto::_MessageHeader_default_instance_);
}
inline const ::PlayerProto::MessageHeader& C2S_PlayerInfo::header() const {
  // @@protoc_insertion_point(field_get:PlayerProto.C2S_PlayerInfo.header)
  return _internal_header();
}
inline void C2S_PlayerInfo::unsafe_arena_set_allocated_header(
    ::PlayerProto::MessageHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerProto.C2S_PlayerInfo.header)
}
inline ::PlayerProto::MessageHeader* C2S_PlayerInfo::release_header() {
  
  ::PlayerProto::MessageHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerProto::MessageHeader* C2S_PlayerInfo::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:PlayerProto.C2S_PlayerInfo.header)
  
  ::PlayerProto::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::PlayerProto::MessageHeader* C2S_PlayerInfo::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerProto::MessageHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::PlayerProto::MessageHeader* C2S_PlayerInfo::mutable_header() {
  ::PlayerProto::MessageHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:PlayerProto.C2S_PlayerInfo.header)
  return _msg;
}
inline void C2S_PlayerInfo::set_allocated_header(::PlayerProto::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PlayerProto::MessageHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.C2S_PlayerInfo.header)
}

// -------------------------------------------------------------------

// S2C_PlayerInfo

// .PlayerProto.MessageHeader header = 1;
inline bool S2C_PlayerInfo::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool S2C_PlayerInfo::has_header() const {
  return _internal_has_header();
}
inline void S2C_PlayerInfo::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::PlayerProto::MessageHeader& S2C_PlayerInfo::_internal_header() const {
  const ::PlayerProto::MessageHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerProto::MessageHeader&>(
      ::PlayerProto::_MessageHeader_default_instance_);
}
inline const ::PlayerProto::MessageHeader& S2C_PlayerInfo::header() const {
  // @@protoc_insertion_point(field_get:PlayerProto.S2C_PlayerInfo.header)
  return _internal_header();
}
inline void S2C_PlayerInfo::unsafe_arena_set_allocated_header(
    ::PlayerProto::MessageHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerProto.S2C_PlayerInfo.header)
}
inline ::PlayerProto::MessageHeader* S2C_PlayerInfo::release_header() {
  
  ::PlayerProto::MessageHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerProto::MessageHeader* S2C_PlayerInfo::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:PlayerProto.S2C_PlayerInfo.header)
  
  ::PlayerProto::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::PlayerProto::MessageHeader* S2C_PlayerInfo::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerProto::MessageHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::PlayerProto::MessageHeader* S2C_PlayerInfo::mutable_header() {
  ::PlayerProto::MessageHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:PlayerProto.S2C_PlayerInfo.header)
  return _msg;
}
inline void S2C_PlayerInfo::set_allocated_header(::PlayerProto::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PlayerProto::MessageHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.S2C_PlayerInfo.header)
}

// string playerName = 2;
inline bool S2C_PlayerInfo::_internal_has_playername() const {
  return body_case() == kPlayerName;
}
inline bool S2C_PlayerInfo::has_playername() const {
  return _internal_has_playername();
}
inline void S2C_PlayerInfo::set_has_playername() {
  _oneof_case_[0] = kPlayerName;
}
inline void S2C_PlayerInfo::clear_playername() {
  if (_internal_has_playername()) {
    body_.playername_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_body();
  }
}
inline const std::string& S2C_PlayerInfo::playername() const {
  // @@protoc_insertion_point(field_get:PlayerProto.S2C_PlayerInfo.playerName)
  return _internal_playername();
}
template <typename ArgT0, typename... ArgT>
inline void S2C_PlayerInfo::set_playername(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_playername()) {
    clear_body();
    set_has_playername();
    body_.playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PlayerProto.S2C_PlayerInfo.playerName)
}
inline std::string* S2C_PlayerInfo::mutable_playername() {
  std::string* _s = _internal_mutable_playername();
  // @@protoc_insertion_point(field_mutable:PlayerProto.S2C_PlayerInfo.playerName)
  return _s;
}
inline const std::string& S2C_PlayerInfo::_internal_playername() const {
  if (_internal_has_playername()) {
    return body_.playername_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void S2C_PlayerInfo::_internal_set_playername(const std::string& value) {
  if (!_internal_has_playername()) {
    clear_body();
    set_has_playername();
    body_.playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S2C_PlayerInfo::_internal_mutable_playername() {
  if (!_internal_has_playername()) {
    clear_body();
    set_has_playername();
    body_.playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return body_.playername_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S2C_PlayerInfo::release_playername() {
  // @@protoc_insertion_point(field_release:PlayerProto.S2C_PlayerInfo.playerName)
  if (_internal_has_playername()) {
    clear_has_body();
    return body_.playername_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void S2C_PlayerInfo::set_allocated_playername(std::string* playername) {
  if (has_body()) {
    clear_body();
  }
  if (playername != nullptr) {
    set_has_playername();
    body_.playername_.UnsafeSetDefault(playername);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(playername);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.S2C_PlayerInfo.playerName)
}

// int32 level = 3;
inline bool S2C_PlayerInfo::_internal_has_level() const {
  return body_case() == kLevel;
}
inline bool S2C_PlayerInfo::has_level() const {
  return _internal_has_level();
}
inline void S2C_PlayerInfo::set_has_level() {
  _oneof_case_[0] = kLevel;
}
inline void S2C_PlayerInfo::clear_level() {
  if (_internal_has_level()) {
    body_.level_ = 0;
    clear_has_body();
  }
}
inline int32_t S2C_PlayerInfo::_internal_level() const {
  if (_internal_has_level()) {
    return body_.level_;
  }
  return 0;
}
inline void S2C_PlayerInfo::_internal_set_level(int32_t value) {
  if (!_internal_has_level()) {
    clear_body();
    set_has_level();
  }
  body_.level_ = value;
}
inline int32_t S2C_PlayerInfo::level() const {
  // @@protoc_insertion_point(field_get:PlayerProto.S2C_PlayerInfo.level)
  return _internal_level();
}
inline void S2C_PlayerInfo::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:PlayerProto.S2C_PlayerInfo.level)
}

// int32 money = 4;
inline bool S2C_PlayerInfo::_internal_has_money() const {
  return body_case() == kMoney;
}
inline bool S2C_PlayerInfo::has_money() const {
  return _internal_has_money();
}
inline void S2C_PlayerInfo::set_has_money() {
  _oneof_case_[0] = kMoney;
}
inline void S2C_PlayerInfo::clear_money() {
  if (_internal_has_money()) {
    body_.money_ = 0;
    clear_has_body();
  }
}
inline int32_t S2C_PlayerInfo::_internal_money() const {
  if (_internal_has_money()) {
    return body_.money_;
  }
  return 0;
}
inline void S2C_PlayerInfo::_internal_set_money(int32_t value) {
  if (!_internal_has_money()) {
    clear_body();
    set_has_money();
  }
  body_.money_ = value;
}
inline int32_t S2C_PlayerInfo::money() const {
  // @@protoc_insertion_point(field_get:PlayerProto.S2C_PlayerInfo.money)
  return _internal_money();
}
inline void S2C_PlayerInfo::set_money(int32_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:PlayerProto.S2C_PlayerInfo.money)
}

inline bool S2C_PlayerInfo::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void S2C_PlayerInfo::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline S2C_PlayerInfo::BodyCase S2C_PlayerInfo::body_case() const {
  return S2C_PlayerInfo::BodyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// C2S_PlayerChat

// .PlayerProto.MessageHeader header = 1;
inline bool C2S_PlayerChat::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool C2S_PlayerChat::has_header() const {
  return _internal_has_header();
}
inline void C2S_PlayerChat::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::PlayerProto::MessageHeader& C2S_PlayerChat::_internal_header() const {
  const ::PlayerProto::MessageHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerProto::MessageHeader&>(
      ::PlayerProto::_MessageHeader_default_instance_);
}
inline const ::PlayerProto::MessageHeader& C2S_PlayerChat::header() const {
  // @@protoc_insertion_point(field_get:PlayerProto.C2S_PlayerChat.header)
  return _internal_header();
}
inline void C2S_PlayerChat::unsafe_arena_set_allocated_header(
    ::PlayerProto::MessageHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerProto.C2S_PlayerChat.header)
}
inline ::PlayerProto::MessageHeader* C2S_PlayerChat::release_header() {
  
  ::PlayerProto::MessageHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerProto::MessageHeader* C2S_PlayerChat::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:PlayerProto.C2S_PlayerChat.header)
  
  ::PlayerProto::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::PlayerProto::MessageHeader* C2S_PlayerChat::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerProto::MessageHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::PlayerProto::MessageHeader* C2S_PlayerChat::mutable_header() {
  ::PlayerProto::MessageHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:PlayerProto.C2S_PlayerChat.header)
  return _msg;
}
inline void C2S_PlayerChat::set_allocated_header(::PlayerProto::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PlayerProto::MessageHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.C2S_PlayerChat.header)
}

// string chat = 2;
inline bool C2S_PlayerChat::_internal_has_chat() const {
  return body_case() == kChat;
}
inline bool C2S_PlayerChat::has_chat() const {
  return _internal_has_chat();
}
inline void C2S_PlayerChat::set_has_chat() {
  _oneof_case_[0] = kChat;
}
inline void C2S_PlayerChat::clear_chat() {
  if (_internal_has_chat()) {
    body_.chat_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_body();
  }
}
inline const std::string& C2S_PlayerChat::chat() const {
  // @@protoc_insertion_point(field_get:PlayerProto.C2S_PlayerChat.chat)
  return _internal_chat();
}
template <typename ArgT0, typename... ArgT>
inline void C2S_PlayerChat::set_chat(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_chat()) {
    clear_body();
    set_has_chat();
    body_.chat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.chat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PlayerProto.C2S_PlayerChat.chat)
}
inline std::string* C2S_PlayerChat::mutable_chat() {
  std::string* _s = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:PlayerProto.C2S_PlayerChat.chat)
  return _s;
}
inline const std::string& C2S_PlayerChat::_internal_chat() const {
  if (_internal_has_chat()) {
    return body_.chat_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void C2S_PlayerChat::_internal_set_chat(const std::string& value) {
  if (!_internal_has_chat()) {
    clear_body();
    set_has_chat();
    body_.chat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.chat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_PlayerChat::_internal_mutable_chat() {
  if (!_internal_has_chat()) {
    clear_body();
    set_has_chat();
    body_.chat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return body_.chat_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_PlayerChat::release_chat() {
  // @@protoc_insertion_point(field_release:PlayerProto.C2S_PlayerChat.chat)
  if (_internal_has_chat()) {
    clear_has_body();
    return body_.chat_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void C2S_PlayerChat::set_allocated_chat(std::string* chat) {
  if (has_body()) {
    clear_body();
  }
  if (chat != nullptr) {
    set_has_chat();
    body_.chat_.UnsafeSetDefault(chat);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(chat);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.C2S_PlayerChat.chat)
}

inline bool C2S_PlayerChat::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void C2S_PlayerChat::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline C2S_PlayerChat::BodyCase C2S_PlayerChat::body_case() const {
  return C2S_PlayerChat::BodyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// S2C_PlayerChat

// .PlayerProto.MessageHeader header = 1;
inline bool S2C_PlayerChat::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool S2C_PlayerChat::has_header() const {
  return _internal_has_header();
}
inline void S2C_PlayerChat::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::PlayerProto::MessageHeader& S2C_PlayerChat::_internal_header() const {
  const ::PlayerProto::MessageHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerProto::MessageHeader&>(
      ::PlayerProto::_MessageHeader_default_instance_);
}
inline const ::PlayerProto::MessageHeader& S2C_PlayerChat::header() const {
  // @@protoc_insertion_point(field_get:PlayerProto.S2C_PlayerChat.header)
  return _internal_header();
}
inline void S2C_PlayerChat::unsafe_arena_set_allocated_header(
    ::PlayerProto::MessageHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerProto.S2C_PlayerChat.header)
}
inline ::PlayerProto::MessageHeader* S2C_PlayerChat::release_header() {
  
  ::PlayerProto::MessageHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerProto::MessageHeader* S2C_PlayerChat::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:PlayerProto.S2C_PlayerChat.header)
  
  ::PlayerProto::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::PlayerProto::MessageHeader* S2C_PlayerChat::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerProto::MessageHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::PlayerProto::MessageHeader* S2C_PlayerChat::mutable_header() {
  ::PlayerProto::MessageHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:PlayerProto.S2C_PlayerChat.header)
  return _msg;
}
inline void S2C_PlayerChat::set_allocated_header(::PlayerProto::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PlayerProto::MessageHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.S2C_PlayerChat.header)
}

// int64 playerId = 2;
inline bool S2C_PlayerChat::_internal_has_playerid() const {
  return body_case() == kPlayerId;
}
inline bool S2C_PlayerChat::has_playerid() const {
  return _internal_has_playerid();
}
inline void S2C_PlayerChat::set_has_playerid() {
  _oneof_case_[0] = kPlayerId;
}
inline void S2C_PlayerChat::clear_playerid() {
  if (_internal_has_playerid()) {
    body_.playerid_ = int64_t{0};
    clear_has_body();
  }
}
inline int64_t S2C_PlayerChat::_internal_playerid() const {
  if (_internal_has_playerid()) {
    return body_.playerid_;
  }
  return int64_t{0};
}
inline void S2C_PlayerChat::_internal_set_playerid(int64_t value) {
  if (!_internal_has_playerid()) {
    clear_body();
    set_has_playerid();
  }
  body_.playerid_ = value;
}
inline int64_t S2C_PlayerChat::playerid() const {
  // @@protoc_insertion_point(field_get:PlayerProto.S2C_PlayerChat.playerId)
  return _internal_playerid();
}
inline void S2C_PlayerChat::set_playerid(int64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:PlayerProto.S2C_PlayerChat.playerId)
}

// string chat = 3;
inline bool S2C_PlayerChat::_internal_has_chat() const {
  return body_case() == kChat;
}
inline bool S2C_PlayerChat::has_chat() const {
  return _internal_has_chat();
}
inline void S2C_PlayerChat::set_has_chat() {
  _oneof_case_[0] = kChat;
}
inline void S2C_PlayerChat::clear_chat() {
  if (_internal_has_chat()) {
    body_.chat_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_body();
  }
}
inline const std::string& S2C_PlayerChat::chat() const {
  // @@protoc_insertion_point(field_get:PlayerProto.S2C_PlayerChat.chat)
  return _internal_chat();
}
template <typename ArgT0, typename... ArgT>
inline void S2C_PlayerChat::set_chat(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_chat()) {
    clear_body();
    set_has_chat();
    body_.chat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.chat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PlayerProto.S2C_PlayerChat.chat)
}
inline std::string* S2C_PlayerChat::mutable_chat() {
  std::string* _s = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:PlayerProto.S2C_PlayerChat.chat)
  return _s;
}
inline const std::string& S2C_PlayerChat::_internal_chat() const {
  if (_internal_has_chat()) {
    return body_.chat_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void S2C_PlayerChat::_internal_set_chat(const std::string& value) {
  if (!_internal_has_chat()) {
    clear_body();
    set_has_chat();
    body_.chat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.chat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S2C_PlayerChat::_internal_mutable_chat() {
  if (!_internal_has_chat()) {
    clear_body();
    set_has_chat();
    body_.chat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return body_.chat_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S2C_PlayerChat::release_chat() {
  // @@protoc_insertion_point(field_release:PlayerProto.S2C_PlayerChat.chat)
  if (_internal_has_chat()) {
    clear_has_body();
    return body_.chat_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void S2C_PlayerChat::set_allocated_chat(std::string* chat) {
  if (has_body()) {
    clear_body();
  }
  if (chat != nullptr) {
    set_has_chat();
    body_.chat_.UnsafeSetDefault(chat);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(chat);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.S2C_PlayerChat.chat)
}

inline bool S2C_PlayerChat::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void S2C_PlayerChat::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline S2C_PlayerChat::BodyCase S2C_PlayerChat::body_case() const {
  return S2C_PlayerChat::BodyCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PlayerProto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PlayerProto::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlayerProto::MessageType>() {
  return ::PlayerProto::MessageType_descriptor();
}
template <> struct is_proto_enum< ::PlayerProto::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlayerProto::ErrorCode>() {
  return ::PlayerProto::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::PlayerProto::ShopType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlayerProto::ShopType>() {
  return ::PlayerProto::ShopType_descriptor();
}
template <> struct is_proto_enum< ::PlayerProto::TradeStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlayerProto::TradeStatus>() {
  return ::PlayerProto::TradeStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PlayerProto_2eproto
