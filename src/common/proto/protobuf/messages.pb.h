// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace messages {
class ClientConnectRequest;
struct ClientConnectRequestDefaultTypeInternal;
extern ClientConnectRequestDefaultTypeInternal _ClientConnectRequest_default_instance_;
class ClientConnectResponse;
struct ClientConnectResponseDefaultTypeInternal;
extern ClientConnectResponseDefaultTypeInternal _ClientConnectResponse_default_instance_;
class Frame;
struct FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
}  // namespace messages
PROTOBUF_NAMESPACE_OPEN
template<> ::messages::ClientConnectRequest* Arena::CreateMaybeMessage<::messages::ClientConnectRequest>(Arena*);
template<> ::messages::ClientConnectResponse* Arena::CreateMaybeMessage<::messages::ClientConnectResponse>(Arena*);
template<> ::messages::Frame* Arena::CreateMaybeMessage<::messages::Frame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace messages {

enum MSG_ID : int {
  MSG_CLIENT_CONNECT = 0,
  MSG_CLIENT_DISCONNECT = 1,
  MSG_CLIENT_OK = 2,
  MSG_CLIENT_REFUSED = 3,
  MSG_CLIENT_HEARTBEAT = 4,
  MSG_SERVER_CLOSE = 16,
  MSG_SERVER_DISCONNECT = 17,
  MSG_ID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MSG_ID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MSG_ID_IsValid(int value);
constexpr MSG_ID MSG_ID_MIN = MSG_CLIENT_CONNECT;
constexpr MSG_ID MSG_ID_MAX = MSG_SERVER_DISCONNECT;
constexpr int MSG_ID_ARRAYSIZE = MSG_ID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSG_ID_descriptor();
template<typename T>
inline const std::string& MSG_ID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MSG_ID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MSG_ID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MSG_ID_descriptor(), enum_t_value);
}
inline bool MSG_ID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MSG_ID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MSG_ID>(
    MSG_ID_descriptor(), name, value);
}
enum STATUS_CODE : int {
  STAT_OK = 0,
  STAT_CONNECTION_REFUSED = 16,
  STAT_CONNECTION_TIMEOUT = 17,
  STAT_SERVER_ERROR = 32,
  STAT_TOKEN_INVALID = 48,
  STAT_TOKEN_EXPIRED = 49,
  STAT_CLIENT_ERROR = 64,
  STAT_CLIENT_INVALID = 65,
  STATUS_CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  STATUS_CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool STATUS_CODE_IsValid(int value);
constexpr STATUS_CODE STATUS_CODE_MIN = STAT_OK;
constexpr STATUS_CODE STATUS_CODE_MAX = STAT_CLIENT_INVALID;
constexpr int STATUS_CODE_ARRAYSIZE = STATUS_CODE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* STATUS_CODE_descriptor();
template<typename T>
inline const std::string& STATUS_CODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, STATUS_CODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function STATUS_CODE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    STATUS_CODE_descriptor(), enum_t_value);
}
inline bool STATUS_CODE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, STATUS_CODE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<STATUS_CODE>(
    STATUS_CODE_descriptor(), name, value);
}
// ===================================================================

class ClientConnectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.ClientConnectRequest) */ {
 public:
  inline ClientConnectRequest() : ClientConnectRequest(nullptr) {}
  ~ClientConnectRequest() override;
  explicit constexpr ClientConnectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientConnectRequest(const ClientConnectRequest& from);
  ClientConnectRequest(ClientConnectRequest&& from) noexcept
    : ClientConnectRequest() {
    *this = ::std::move(from);
  }

  inline ClientConnectRequest& operator=(const ClientConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientConnectRequest& operator=(ClientConnectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientConnectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientConnectRequest* internal_default_instance() {
    return reinterpret_cast<const ClientConnectRequest*>(
               &_ClientConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientConnectRequest& a, ClientConnectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientConnectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientConnectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientConnectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientConnectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientConnectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientConnectRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientConnectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.ClientConnectRequest";
  }
  protected:
  explicit ClientConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kClientIdFieldNumber = 1,
  };
  // optional string token = 2;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional int64 clientId = 1;
  bool has_clientid() const;
  private:
  bool _internal_has_clientid() const;
  public:
  void clear_clientid();
  int64_t clientid() const;
  void set_clientid(int64_t value);
  private:
  int64_t _internal_clientid() const;
  void _internal_set_clientid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:messages.ClientConnectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  int64_t clientid_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ClientConnectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.ClientConnectResponse) */ {
 public:
  inline ClientConnectResponse() : ClientConnectResponse(nullptr) {}
  ~ClientConnectResponse() override;
  explicit constexpr ClientConnectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientConnectResponse(const ClientConnectResponse& from);
  ClientConnectResponse(ClientConnectResponse&& from) noexcept
    : ClientConnectResponse() {
    *this = ::std::move(from);
  }

  inline ClientConnectResponse& operator=(const ClientConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientConnectResponse& operator=(ClientConnectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientConnectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientConnectResponse* internal_default_instance() {
    return reinterpret_cast<const ClientConnectResponse*>(
               &_ClientConnectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientConnectResponse& a, ClientConnectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientConnectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientConnectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientConnectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientConnectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientConnectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientConnectResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientConnectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.ClientConnectResponse";
  }
  protected:
  explicit ClientConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodeFieldNumber = 1,
  };
  // optional .messages.STATUS_CODE statusCode = 1;
  bool has_statuscode() const;
  private:
  bool _internal_has_statuscode() const;
  public:
  void clear_statuscode();
  ::messages::STATUS_CODE statuscode() const;
  void set_statuscode(::messages::STATUS_CODE value);
  private:
  ::messages::STATUS_CODE _internal_statuscode() const;
  void _internal_set_statuscode(::messages::STATUS_CODE value);
  public:

  // @@protoc_insertion_point(class_scope:messages.ClientConnectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int statuscode_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Frame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  ~Frame() override;
  explicit constexpr Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Frame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kMsgIdFieldNumber = 1,
    kFrameIdFieldNumber = 2,
  };
  // optional bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .messages.MSG_ID msgId = 1;
  void clear_msgid();
  ::messages::MSG_ID msgid() const;
  void set_msgid(::messages::MSG_ID value);
  private:
  ::messages::MSG_ID _internal_msgid() const;
  void _internal_set_msgid(::messages::MSG_ID value);
  public:

  // optional int32 frameId = 2;
  bool has_frameid() const;
  private:
  bool _internal_has_frameid() const;
  public:
  void clear_frameid();
  int32_t frameid() const;
  void set_frameid(int32_t value);
  private:
  int32_t _internal_frameid() const;
  void _internal_set_frameid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:messages.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int msgid_;
  int32_t frameid_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientConnectRequest

// optional int64 clientId = 1;
inline bool ClientConnectRequest::_internal_has_clientid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientConnectRequest::has_clientid() const {
  return _internal_has_clientid();
}
inline void ClientConnectRequest::clear_clientid() {
  clientid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t ClientConnectRequest::_internal_clientid() const {
  return clientid_;
}
inline int64_t ClientConnectRequest::clientid() const {
  // @@protoc_insertion_point(field_get:messages.ClientConnectRequest.clientId)
  return _internal_clientid();
}
inline void ClientConnectRequest::_internal_set_clientid(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  clientid_ = value;
}
inline void ClientConnectRequest::set_clientid(int64_t value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:messages.ClientConnectRequest.clientId)
}

// optional string token = 2;
inline bool ClientConnectRequest::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientConnectRequest::has_token() const {
  return _internal_has_token();
}
inline void ClientConnectRequest::clear_token() {
  token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientConnectRequest::token() const {
  // @@protoc_insertion_point(field_get:messages.ClientConnectRequest.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientConnectRequest::set_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:messages.ClientConnectRequest.token)
}
inline std::string* ClientConnectRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:messages.ClientConnectRequest.token)
  return _s;
}
inline const std::string& ClientConnectRequest::_internal_token() const {
  return token_.Get();
}
inline void ClientConnectRequest::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClientConnectRequest::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClientConnectRequest::release_token() {
  // @@protoc_insertion_point(field_release:messages.ClientConnectRequest.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientConnectRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messages.ClientConnectRequest.token)
}

// -------------------------------------------------------------------

// ClientConnectResponse

// optional .messages.STATUS_CODE statusCode = 1;
inline bool ClientConnectResponse::_internal_has_statuscode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientConnectResponse::has_statuscode() const {
  return _internal_has_statuscode();
}
inline void ClientConnectResponse::clear_statuscode() {
  statuscode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::messages::STATUS_CODE ClientConnectResponse::_internal_statuscode() const {
  return static_cast< ::messages::STATUS_CODE >(statuscode_);
}
inline ::messages::STATUS_CODE ClientConnectResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:messages.ClientConnectResponse.statusCode)
  return _internal_statuscode();
}
inline void ClientConnectResponse::_internal_set_statuscode(::messages::STATUS_CODE value) {
  _has_bits_[0] |= 0x00000001u;
  statuscode_ = value;
}
inline void ClientConnectResponse::set_statuscode(::messages::STATUS_CODE value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:messages.ClientConnectResponse.statusCode)
}

// -------------------------------------------------------------------

// Frame

// .messages.MSG_ID msgId = 1;
inline void Frame::clear_msgid() {
  msgid_ = 0;
}
inline ::messages::MSG_ID Frame::_internal_msgid() const {
  return static_cast< ::messages::MSG_ID >(msgid_);
}
inline ::messages::MSG_ID Frame::msgid() const {
  // @@protoc_insertion_point(field_get:messages.Frame.msgId)
  return _internal_msgid();
}
inline void Frame::_internal_set_msgid(::messages::MSG_ID value) {
  
  msgid_ = value;
}
inline void Frame::set_msgid(::messages::MSG_ID value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:messages.Frame.msgId)
}

// optional int32 frameId = 2;
inline bool Frame::_internal_has_frameid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Frame::has_frameid() const {
  return _internal_has_frameid();
}
inline void Frame::clear_frameid() {
  frameid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Frame::_internal_frameid() const {
  return frameid_;
}
inline int32_t Frame::frameid() const {
  // @@protoc_insertion_point(field_get:messages.Frame.frameId)
  return _internal_frameid();
}
inline void Frame::_internal_set_frameid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  frameid_ = value;
}
inline void Frame::set_frameid(int32_t value) {
  _internal_set_frameid(value);
  // @@protoc_insertion_point(field_set:messages.Frame.frameId)
}

// optional bytes data = 3;
inline bool Frame::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Frame::has_data() const {
  return _internal_has_data();
}
inline void Frame::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Frame::data() const {
  // @@protoc_insertion_point(field_get:messages.Frame.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Frame::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:messages.Frame.data)
}
inline std::string* Frame::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:messages.Frame.data)
  return _s;
}
inline const std::string& Frame::_internal_data() const {
  return data_.Get();
}
inline void Frame::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Frame::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Frame::release_data() {
  // @@protoc_insertion_point(field_release:messages.Frame.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Frame::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messages.Frame.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::messages::MSG_ID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::messages::MSG_ID>() {
  return ::messages::MSG_ID_descriptor();
}
template <> struct is_proto_enum< ::messages::STATUS_CODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::messages::STATUS_CODE>() {
  return ::messages::STATUS_CODE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
